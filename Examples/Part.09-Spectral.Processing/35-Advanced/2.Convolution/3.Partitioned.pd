#N canvas 248 35 1036 687 12;
#X declare -path else;
#X obj 305 253 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 305 279 tabplay~ \$0-IR;
#X obj 305 317 out~;
#X text 329 253 Play IR:;
#X obj 665 393 out~;
#X text 49 29 Partitioned convolution divides the IR into smaller bits so we get much shorter latencies suitable for live input. The convolution is done in each partition separately., f 61;
#X obj 664 241 *~;
#X obj 682 174 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X floatatom 556 176 5 0 0 0 - - - 0;
#X obj 556 204 standard~ 100;
#X obj 682 203 envgen~ 500 1 150 0;
#X obj 710 233 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 710 266 + 1;
#X obj 665 309 xselect~ 2 100 1;
#X text 524 56 The sound input in the convolution is a chaotic oscillator. Since the IR actually sounds more like an input \, we can think of the input as the actual IR \, since the operation is commutative (convoluting a and B is the same as convoluting B and A). We also have an envelope generator to control the incoming sound. As an alternative \, we also have a sample input that you can select with [xselect~]., f 68;
#X text 735 234 <= change input;
#X obj 556 285 out~;
#X text 773 420 <= watch it \, this can get loud!!!, f 18;
#X obj 838 21 declare -path else;
#X obj 64 307 sample~ \$0-IR voice.wav, f 24;
#X text 71 397 This is to reinforce the idea of using convolution as a general sound processor. It's been noted that convolution is widely used as a reverberator \, but you can also think of it as a filter. We'll get back to convolution when we discuss in depth filters and reverbs \, but for now let's have fun with it in a more creative way., f 57;
#X obj 774 264 play.file~ bubul.wav 1 1;
#X text 49 87 For didatical purposes \, we can implement this in a Pd patch by loading different instances of each partition inside [clone]. This way \, an input is convoluted to all partitions at the same time \, but they're delayed accordingly so they get added at the right time., f 61;
#X text 49 170 The [conv.abs~] is an abstraction used in this example that implements partitioned convolution this way. It needs a partition size and an audio file to load as an IR. Below we load a rather bizarre IR file: a voice sample \, also used in Pd Vanilla's example., f 61;
#X text 855 347 partition size \, file name, f 15;
#X obj 661 600 out~;
#X obj 661 537 play.file~ vacuous.wav 1 1;
#X text 66 547 This abstraction used to be an object in ELSE \, but it is now just used here in the tutorial instead. The real object in ELSE is now a compiled object named [conv~] \, which is quite similar but much more CPU efficient. This object is also based on [convolve~] by William Brent \, also available for download via deken. Instead of the [conv.abs~] example \, it needs an array name for the IR., f 79;
#X text 33 500 ==================================================================================================================================, f 131;
#X text 797 571 check its help file;
#X obj 661 568 conv~ 1024 \$0-IR;
#X obj 665 351 conv.abs~ 1024 voice.wav;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 6 0 13 0;
#X connect 7 0 10 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 9 0 16 0;
#X connect 10 0 6 1;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 13 0 31 0;
#X connect 21 0 13 1;
#X connect 26 0 30 0;
#X connect 30 0 25 0;
#X connect 31 0 4 0;
