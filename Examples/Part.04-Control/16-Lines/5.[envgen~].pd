#N canvas 315 52 959 700 12;
#X declare -path else;
#X obj 285 547 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X text 293 421 start \, duration \, target;
#X text 361 353 duration \, target, f 9;
#X obj 68 542 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 68 432 bng 21 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 68 466 envgen~ 0 1000 1 250 0.25 250 0.25 500 1 250 1 250 0, f 26;
#X obj 285 511 s2f~;
#X obj 68 508 s2f~;
#X obj 760 46 declare -path else;
#X obj 160 351 setdsp~;
#X obj 285 472 envgen~;
#X text 373 384 jumps immediately, f 12;
#X text 57 264 This object is very complex. Take a moment to study its help file and keep checking the documentation for the next examples., f 59;
#X obj 546 212 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 557 70 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 653 97 duration \, target, f 10;
#X obj 546 176 s2f~;
#X obj 546 137 envgen~;
#X msg 265 361 500 \$1 \, bang;
#X msg 299 440 0 1000 1 \, bang;
#X msg 557 104 500 \$1 \, bang;
#X text 57 35 The [envgen~] object from ELSE is similar to the [vline~] object as it generate multiple lines \, but it has a quite different syntax and also other features since it is an actual envelope generator after all. Let's present it here as a line generator similarly to [vline~] (before using it as a proper envelope generator in the next section)., f 59;
#X text 57 126 The line segments are set in pairs of duration and target value. which is the opposite of the [line] family of objects from Pd Vanilla. But if you have an odd number of elements \, the first float sets a staring point. A single float a gate value (we'll see that later). One big difference to the line family of objects is that [envgen~] is triggered by bangs or gates only. A duration of 0 is possible for immediate jumps \, which overwrite the last value of the previous ramp., f 59;
#X obj 546 41 initmess curve 1;
#X msg 285 391 0 0.5 \, bang;
#X obj 265 331 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 598 174 Exponential curve (same as setting the curve in [smooth~]), f 37;
#X obj 512 536 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 523 397 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 512 503 s2f~;
#X obj 512 464 envgen~;
#X msg 523 431 500 \$1 \, bang;
#X obj 512 368 initmess curve ^4;
#X text 597 222 This is also the curve settings in the [asr~] and [adsr~] objects., f 45;
#X obj 780 542 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 791 403 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 780 509 s2f~;
#X obj 780 470 envgen~;
#X msg 791 437 500 \$1 \, bang;
#X obj 780 374 initmess curve lag;
#X text 598 260 This object also has 'sin' and 'hann' shapes as we'll see later in this tutorial. First \, check the other options below., f 44;
#X text 586 477 To the left we have an Exponential "power" curve (same as setting the exponential factor to "4" in [rescale~] or [glide~]). To the right we have a "lag" curve \, which is a one pole filter like the [lag~] object \, also present in [asr~] and [adsr~] objects., f 22;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 6 0 0 0;
#X connect 7 0 3 0;
#X connect 10 0 6 0;
#X connect 14 0 20 0;
#X connect 16 0 13 0;
#X connect 17 0 16 0;
#X connect 18 0 10 0;
#X connect 19 0 10 0;
#X connect 20 0 17 0;
#X connect 23 0 17 0;
#X connect 24 0 10 0;
#X connect 25 0 18 0;
#X connect 28 0 31 0;
#X connect 29 0 27 0;
#X connect 30 0 29 0;
#X connect 31 0 30 0;
#X connect 32 0 30 0;
#X connect 35 0 38 0;
#X connect 36 0 34 0;
#X connect 37 0 36 0;
#X connect 38 0 37 0;
#X connect 39 0 37 0;
