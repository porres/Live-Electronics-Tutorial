#N canvas 499 94 587 517 12;
#X declare -path else;
#X obj 64 326 envgen~;
#X obj 103 229 nbx 5 17 0 2000 0 0 empty empty empty 0 -8 0 12 #dcdcdc #000000 #000000 0 256;
#X obj 64 221 bng 25 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 106 207 ms;
#X msg 64 290 0 \$1 1;
#X obj 64 403 function~;
#X text 54 53 You can also use [function] with [function~]. Actually \, this is its original goal. The [function~] object can be thought of as a table that you can from with audio signal input., f 66;
#X obj 64 259 f 1500;
#X obj 224 232 function 200 100 empty empty 0 1 220 220 220 50 50 50 0 0 0 0 0 1000 1 250 0.25 250 0.25 500 1 250 1 250 0;
#X msg 224 199 0 1000 1 250 0.25 250 0.25 500 1 250 1 250 0;
#X obj 224 171 loadbang;
#X obj 327 12 declare -path else;
#X obj 64 435 s2f~;
#X obj 67 473 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 226 372 setdsp~;
#X text 333 380 Check the help file of [function~] and note you can also draw curved line shapes in the same way as [envgen~] as it has the exact same features and syntax., f 26;
#X text 54 101 You can then plug into it a [phasor~] to read the function in a loop \, which is the common thing to do. But you can \, as shown here \, use [envgen~] to generate a line from 0 to 1 that reads through the function table., f 66;
#X connect 0 0 5 0;
#X connect 1 0 7 1;
#X connect 2 0 7 0;
#X connect 4 0 0 0;
#X connect 5 0 12 0;
#X connect 7 0 4 0;
#X connect 8 0 5 0;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 12 0 13 0;
