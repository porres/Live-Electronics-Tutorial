#N canvas 409 49 651 531 12;
#X declare -path else;
#X obj 463 18 declare -path else;
#X text 490 345 UDP packets \, binary output, f 14;
#X text 364 287 listen on port 5000;
#X listbox 362 389 23 0 0 0 - - - 0;
#X obj 362 426 fudiparse;
#X floatatom 47 291 5 0 0 0 - - - 0;
#X obj 47 474 netsend -u -b;
#X obj 362 351 netreceive -u -b;
#X obj 47 368 fudiformat -u;
#X msg 47 324 foo \$1;
#X obj 362 465 display;
#X obj 73 427 initmess connect localhost 5000;
#X text 151 475 send via UDP \, as binary;
#X text 110 318 A FUDI message with a number and a symbol., f 21;
#X text 42 151 FUDI stands for "Fast Unified Digital Interface" and is a the networking protocol used by Pd internally to for different purposes \, such as communicate between the GUI process and the DSP process. You can use [fudiformat] and [fudiparse] to create and retrieve FUDI packets that can be transmited over a UDP network connection. This way you can send Pd messages to other Pd applications on this or another computer. You can communicate to other versions of Pd on the same computer or even another fork \, so you can communicate between PlugData and Pd Vanilla \, for instance., f 81;
#X obj 362 315 initmess listen 5000;
#X text 42 60 This section shows how to send and receive control data and audio signals in Pd over the network \, starting with FUDI messages. We've seen how to use [netsend] and [netreceive] to send and receive OSC message in Vanila. Clearly \, you can do much more with network connections and send other types of messages \, such as "FUDI" messages., f 81;
#X connect 3 0 4 0;
#X connect 4 0 10 0;
#X connect 5 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 6 0;
#X connect 9 0 8 0;
#X connect 11 0 6 0;
#X connect 15 0 7 0;
