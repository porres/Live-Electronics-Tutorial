#N canvas 298 26 827 539 12;
#X declare -path else;
#X obj 68 164 setdsp~;
#X obj 595 34 declare -path else;
#X text 31 29 You can use [snake~ in] to create a multichannel signal from float inputs \, in which case every inlet behaves like a [sig~] object. You can also have a list input so you can convert a list to a multichannnel signal., f 55;
#X obj 162 218 snake~ in 4, f 24;
#X msg 162 117 1 2 3 4;
#X floatatom 175 160 5 0 0 0 - - - 0;
#X floatatom 217 160 5 0 0 0 - - - 0;
#X floatatom 272 160 5 0 0 0 - - - 0;
#X floatatom 327 160 5 0 0 0 - - - 0;
#X listbox 162 302 17 0 0 0 - - - 0;
#X obj 162 262 sig2float~;
#X obj 88 440 sig2float~;
#X obj 88 396 sigs~ 1 2 3 4, f 14;
#X floatatom 72 357 5 0 0 0 - - - 0;
#X floatatom 119 357 5 0 0 0 - - - 0;
#X floatatom 166 357 5 0 0 0 - - - 0;
#X floatatom 213 357 5 0 0 0 - - - 0;
#X listbox 88 472 17 0 0 0 - - - 0;
#X text 250 407 There's no way to convert a multichhanel signal to a list of floats in Vanilla \, but the [sig2float~] object from ELSE does that. ELSE also provides [sigs~] \, a multichannel version of [sig~] that is similar to a [snake~ in] object but has the convenience to set the values as arguments., f 74;
#X text 475 83 Note the the [float2sig~] object can also generate multichannel signals. In this case \, the object can take lists of different lengths and adjust the number of channels accordingly., f 38;
#X obj 639 240 nbx 5 14 0 1000 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 698 239 ramp time;
#X listbox 495 232 15 0 0 0 - - - 12;
#X listbox 495 327 34 0 0 0 - - - 12;
#X msg 495 201 4 5 6 7;
#X msg 443 201 1 2 3;
#X obj 495 269 float2sig~ 1000 1 2 3;
#X obj 495 299 sig2float~;
#X connect 3 0 10 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 3 1;
#X connect 7 0 3 2;
#X connect 8 0 3 3;
#X connect 10 0 9 0;
#X connect 11 0 17 0;
#X connect 12 0 11 0;
#X connect 13 0 12 0;
#X connect 14 0 12 1;
#X connect 15 0 12 2;
#X connect 16 0 12 3;
#X connect 20 0 26 1;
#X connect 22 0 26 0;
#X connect 24 0 22 0;
#X connect 25 0 22 0;
#X connect 26 0 27 0;
#X connect 27 0 23 0;
