#N canvas 328 101 816 432 12;
#X declare -path else;
#X obj 66 130 setdsp~;
#X obj 595 48 declare -path else;
#X listbox 174 277 17 0 0 0 - - - 0;
#X obj 174 237 sig2float~;
#X listbox 107 370 17 0 0 0 - - - 0;
#X text 475 97 Note the the [float2sig~] object can also generate multichannel signals. In this case \, the object can take lists of different lengths and adjust the number of channels accordingly., f 38;
#X obj 639 254 nbx 5 14 0 1000 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 698 253 ramp time;
#X listbox 495 246 15 0 0 0 - - - 12;
#X listbox 495 341 34 0 0 0 - - - 12;
#X msg 495 215 4 5 6 7;
#X msg 443 215 1 2 3;
#X obj 495 283 float2sig~ 1000 1 2 3;
#X obj 495 313 sig2float~;
#X floatatom 189 162 5 0 0 0 - - - 0;
#X floatatom 236 162 5 0 0 0 - - - 0;
#X floatatom 283 162 5 0 0 0 - - - 0;
#X floatatom 330 162 5 0 0 0 - - - 0;
#X obj 174 196 sig~ 1 2 3 4, f 23;
#X msg 174 130 10 11 12 13;
#X obj 107 338 snapshot~;
#X obj 51 245 tempo -on -ms 100, f 10;
#X text 31 30 You can use [sig~] to create a multichannel signal from float inputs. You can also have a list input so you can convert a list to a multichannnel signal. The [sig2float~] object from ELSE or Vanilla's [snapshot~] can convert MC signals to lists.;
#X connect 3 0 2 0;
#X connect 6 0 12 1;
#X connect 8 0 12 0;
#X connect 10 0 8 0;
#X connect 11 0 8 0;
#X connect 12 0 13 0;
#X connect 13 0 9 0;
#X connect 14 0 18 0;
#X connect 15 0 18 1;
#X connect 16 0 18 2;
#X connect 17 0 18 3;
#X connect 18 0 3 0;
#X connect 18 0 20 0;
#X connect 19 0 18 0;
#X connect 20 0 4 0;
#X connect 21 0 20 0;
