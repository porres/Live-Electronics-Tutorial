#N canvas 580 54 586 705 12;
#X declare -path else;
#X obj 77 273 sig~;
#X obj 357 651 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 339 483 v delta;
#X obj 421 274 setdsp~ 1;
#X obj 354 615 s2f~;
#X obj 131 484 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 128 448 s2f~;
#X obj 128 416 slew2~ 1 2;
#X obj 227 387 /;
#X obj 227 442 v slewup;
#X floatatom 227 415 11 0 0 0 - - - 0;
#X obj 317 387 /;
#X floatatom 317 415 11 0 0 0 - - - 0;
#X obj 317 442 v slewdown;
#X text 408 415 Amp/sample;
#X text 44 24 We've seen slew limiting before. This examples shows how to implement it with [fexpr~]. The input for the [slew2~] is amplitude limit per second \, but for the [fexpr~] formula it is in amplitude per sample \, so we convert by dividing it by the sample rate., f 69;
#X obj 259 388 sr~;
#X obj 349 387 sr~;
#X obj 374 216 declare -path else;
#X floatatom 161 330 5 0 0 0 - - - 0;
#X floatatom 228 331 5 0 0 0 - - - 0;
#X obj 161 276 initmess 1 2;
#X text 160 252 Amp/sec;
#X obj 161 305 unpack f f;
#X obj 77 214 tgl 25 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X floatatom 77 248 3 0 0 0 - - - 0;
#X text 44 95 The algorithm is that if delta (input value minus last output) is higher than the limit \, then we sum the output to the limit value. For the downward slew \, it needs to be smaller than the negative slew limit and the same idea applies. We keep doing that until the difference between the input and output is smaller than the limit \, in which case we just sum to the diference and reach the target value., f 69;
#X obj 77 552 fexpr~ delta = $x - $y2 \; $y2 + if(delta > slewup \, slewup \, if(delta < -slewdown \, -slewdown \, 0)), f 40;
#X connect 0 0 7 0;
#X connect 0 0 27 0;
#X connect 4 0 1 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 10 0;
#X connect 10 0 9 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 16 0 8 1;
#X connect 17 0 11 1;
#X connect 19 0 8 0;
#X connect 19 0 7 1;
#X connect 20 0 11 0;
#X connect 20 0 7 2;
#X connect 21 0 23 0;
#X connect 23 0 19 0;
#X connect 23 1 20 0;
#X connect 24 0 25 0;
#X connect 25 0 0 0;
#X connect 27 1 4 0;
