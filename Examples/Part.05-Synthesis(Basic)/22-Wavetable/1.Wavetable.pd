#N canvas 157 23 1146 718 12;
#X declare -path else;
#X text 21 74 We've seen the basics of Wavetable Synthesis when the wavetable oscillators were presented \, namely [tabosc4~] and [wavetable~] (or [wt~] for a short abbreviation)., f 71;
#X text 21 126 Here we'll dig a bit more in \, but in order to really understand it well and in full depth we need to go further in this tutorial and also check details on sampling and handling audio buffers \, specially interpolation that is fully presented in "29-Sampling(buffer)"., f 71;
#X text 21 200 One interest thing to stress is that oscillators like [osc~] are actually wavetable oscillators "behind the scenes" \, which means that internally a wavetable is pre computed and stored \, then read through at a speed according to a frequency input. One could wrongly assume that such an oscillator would actually compute the trigonometric cosine function \, but vahing a wavetable instead is more efficient computationally., f 71;
#X obj 129 446 osc~ 440;
#X obj 287 426 phasor~ 440;
#X obj 287 460 cos~;
#X obj 129 479 out~;
#X obj 287 497 out~;
#X obj 130 623 out~;
#X obj 130 590 sine~ 440;
#X obj 291 578 phasor~ 440;
#X obj 291 648 out~;
#X obj 291 612 sin~;
#X obj 356 24 declare -path else;
#X text 566 12 With [tabosc4~] you can also choose a wavetable with more resolution or less. Not that it makes that much difference the main purpose here is didactical. The object can also be broken down into a [phasor~] and [tabread4~]. In this case you also have access to the phase \, for modulation and what not., f 77;
#X text 21 310 In the case of [osc~] we have a cosine table whise size is 512 points. The [cos~] object is also a wavetable \, the same one in fact and you can connect a [phasor~] to it to implement the same oscillator \, and thisshown later in this Tutorial. As for ELSE's [sine~] and [sin~] we have the same deal \, but a sine wavetable is computed instead \, and its size is 16384 points \, so there's more resolution., f 71;
#X obj 586 166 tabosc4~ \$0-sine;
#X obj 586 200 out~;
#X obj 586 131 sig~ 440;
#X obj 736 102 cnv 19 198 128 empty empty empty 20 12 0 12 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-sine 16387 float 0;
#X coords 0 1 16386 -1 200 130 1 0 0;
#X restore 735 101 graph;
#X obj 991 217 out~;
#X obj 991 102 phasor~ 440;
#X obj 991 185 tabread4~ \$0-sine;
#X obj 991 132 *~ 16384;
#X obj 991 162 +~ 1;
#X obj 747 242 initmess \; \$0-sine sinesum 16384 1;
#X text 566 299 Note that with [tabred4~] we have a lower level implementation and the input is the point index number. We then need to multiply the [phasor~] output to the table size. The [tabred4~] has the same 4-point interpolation method than [tabosc4~] \, already mentioned before \, called 'Lagrange'. Lets also mention again that 'sinesum' generates 3 extra guard points for interpolation. Again \, more about this will follow soon \, but we can advance that such extra points are the first index in the table and the last two ones. This is why we add "1" before feeding into [tabread4~]., f 77;
#X obj 626 638 out~;
#X obj 851 563 phasor~ 440;
#X obj 851 590 *~ 16384;
#X obj 913 454 array define \$0-table;
#X obj 913 426 tabgen 16384 \$0-table sin;
#X text 567 425 A lower level implementation with ELSE objects is simpler \, we can generate a sine wave with [tabgen] and not worry about the guard points., f 47;
#X obj 851 642 out~;
#X obj 626 572 phasor~ 440;
#X obj 626 607 tabreader~ -loop \$0-sine;
#X obj 851 615 tabreader~ -loop -index \$0-sine;
#X text 566 492 The [tabreader~] object from ELSE is a low level object that can be used to read a table with [phasor~] directly or you can give it a point index if you have the '-index' flag. Either way you have to be in 'loop' mode., f 77;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 12 0;
#X connect 12 0 11 0;
#X connect 16 0 17 0;
#X connect 18 0 16 0;
#X connect 22 0 24 0;
#X connect 23 0 21 0;
#X connect 24 0 25 0;
#X connect 25 0 23 0;
#X connect 29 0 30 0;
#X connect 30 0 37 0;
#X connect 35 0 36 0;
#X connect 36 0 28 0;
#X connect 37 0 34 0;
