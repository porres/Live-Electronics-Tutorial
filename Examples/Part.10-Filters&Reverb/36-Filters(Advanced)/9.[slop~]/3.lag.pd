#N canvas 278 44 1016 807 12;
#X declare -path else;
#X obj 500 175 setdsp~;
#X obj 755 28 declare -path else;
#X floatatom 713 285 5 0 0 0 - - - 0;
#X obj 713 245 expr 1000./$f1;
#X floatatom 713 211 5 10 125 0 - - - 0;
#X obj 631 378 graph~ 10000 3 -0.025 1.025 200 140;
#X obj 631 238 pulse~ 4;
#X obj 192 434 hz2rad;
#X obj 52 163 pulse~ 4;
#X obj 392 377 graph~ 10000 3 -0.025 1.025 200 140;
#X obj 192 366 expr 1000./$f1;
#X floatatom 192 309 5 10 125 0 - - - 0;
#X floatatom 192 464 0 0 0 0 - - - 0;
#X obj 192 274 initmess 125;
#X text 234 309 ms;
#X floatatom 192 404 5 10 125 0 - - - 0;
#X text 234 405 Hz;
#X text 752 210 ms;
#X obj 631 326 slop~, f 20;
#X text 532 71 If you want the same lag time for both rising and falling sections \, you can have the slew limits high and just use the 'f' input as in the last example.;
#X obj 512 324 v f_up;
#X obj 436 324 v f_down;
#X obj 469 286 v delta;
#X obj 192 496 v f_up;
#X obj 52 205 fexpr~ delta = $x - $y2 \; $y2 + if(delta > 0 \, f_up * delta \, f_down * delta);
#X obj 72 434 hz2rad;
#X obj 72 366 expr 1000./$f1;
#X floatatom 72 309 5 10 125 0 - - - 0;
#X floatatom 72 464 0 0 0 0 - - - 0;
#X text 114 309 ms;
#X floatatom 72 404 5 10 125 0 - - - 0;
#X text 114 405 Hz;
#X obj 72 496 v f_down;
#X obj 72 274 initmess 10;
#X floatatom 838 285 5 0 0 0 - - - 0;
#X obj 838 245 expr 1000./$f1;
#X floatatom 838 211 5 10 125 0 - - - 0;
#X text 877 210 ms;
#X text 813 284 up;
#X text 676 284 down;
#X obj 176 602 lag2~ 125 10;
#X obj 176 566 pulse~ 4;
#X obj 176 641 graph~ 10000 3 -0.025 1.025 200 140;
#X text 36 18 When the slew limit is zero \, you have the same filter formula from before but you can set different parameters for when the signal is increasing or decreasing \, which is suited to implement a 'lag' control. Usually you want a lag time in ms \, so we just need to convert to frequency. Here's the simplification \, compare to the right. Since this is the same formula from before \, it's also the same thing as [lop~]. So it's like a [lop~] with rising and falling cutoffs!, f 64;
#X text 458 674 The ELSE library has [lag2~] for the same purpose as already shown. Earlier in the last subsection it was also shown its filter formula \, which is not the same as [lop~]/[slop~] but it generates a pretty close result.;
#X obj 92 337 s down;
#X obj 206 337 s up;
#X obj 713 179 r down;
#X obj 838 179 r up;
#X floatatom 305 564 5 10 125 0 - - - 0;
#X obj 305 532 r down;
#X floatatom 257 565 5 10 125 0 - - - 0;
#X obj 257 533 r up;
#X connect 2 0 18 3;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 6 0 18 0;
#X connect 7 0 12 0;
#X connect 8 0 24 0;
#X connect 10 0 15 0;
#X connect 11 0 10 0;
#X connect 11 0 46 0;
#X connect 12 0 23 0;
#X connect 13 0 11 0;
#X connect 15 0 7 0;
#X connect 18 0 5 0;
#X connect 24 1 9 0;
#X connect 25 0 28 0;
#X connect 26 0 30 0;
#X connect 27 0 26 0;
#X connect 27 0 45 0;
#X connect 28 0 32 0;
#X connect 30 0 25 0;
#X connect 33 0 27 0;
#X connect 34 0 18 5;
#X connect 35 0 34 0;
#X connect 36 0 35 0;
#X connect 40 0 42 0;
#X connect 41 0 40 0;
#X connect 47 0 4 0;
#X connect 48 0 36 0;
#X connect 49 0 40 2;
#X connect 50 0 49 0;
#X connect 51 0 40 1;
#X connect 52 0 51 0;
