#N canvas 199 23 969 432 12;
#X declare -path else;
#X obj 163 311 sin~;
#X obj 651 129 osc~ 440;
#X obj 163 274 phasor~ 440;
#X obj 163 345 out~;
#X obj 651 167 out~;
#X obj 597 352 out~;
#X obj 597 313 sine~ 440;
#X obj 722 350 out~;
#X obj 722 311 cosine~ 440;
#X text 88 310 Sine Wave;
#X obj 266 345 out~;
#X obj 266 311 cos~;
#X text 299 310 Cosine Wave;
#X text 510 67 The native [osc~] object is a cosine wave oscillator
\, which is more CPU efficient that [phasor~] + [cos~]. In contrast
\, [phasor~] + [cos~] allows phase modulation.;
#X text 521 240 The ELSE library has Sine and Cosine wave oscillators
\, both of which allows phase reset (as with [osc~] and [phasor~] \,
but they also allow phase modulation on the right inlet.;
#X obj 782 22 declare -path else;
#X text 44 31 An oscillator produces a periodic waveform that depends
on the oscillator type and can be defined as "Deterministic" generators
\, since what they produce is known and determined. The simplest waveform
is a sinusoidal wave \, which is also known as a "pure tone" because
it has a single frequency., f 61;
#X text 43 121 A sinusoidal wave can be generated by both the sine
and cosine functions \, which are basically the same thing. There's
only an initial phase difference (a pahse quadrature difference). A
proper sine wave \, though \, needs to have the initial phase of the
sine function. If the initial phase is that of a cosine \, then we
have a cosine wave oscillator. We can implement these oscillators with
[phasor~] and the [sin~]/[cos~] functions., f 62;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 2 0 11 0;
#X connect 6 0 5 0;
#X connect 8 0 7 0;
#X connect 11 0 10 0;
