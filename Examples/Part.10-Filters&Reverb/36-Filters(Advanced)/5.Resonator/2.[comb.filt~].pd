#N canvas 313 156 1053 590 12;
#X declare -path else;
#X obj 557 160 impseq~;
#X obj 103 132 cnv 15 320 120 empty empty empty 20 12 0 14 #e0e0e0
#404040 0;
#X text 165 145 |;
#X text 165 157 |;
#X text 165 169 |;
#X text 136 184 |;
#X text 185 184 |;
#X text 185 202 |;
#X text 136 202 |;
#X text 139 172 _______;
#X text 139 202 _______;
#X text 165 172 v;
#X text 225 173 |;
#X text 225 185 |;
#X text 225 154 |;
#X text 225 163 |;
#X text 225 149 ^;
#X text 321 146 |;
#X text 321 158 |;
#X text 321 170 |;
#X text 300 184 |;
#X text 349 184 |;
#X text 349 202 |;
#X text 300 202 |;
#X text 303 172 _______;
#X text 303 202 _______;
#X text 321 173 v;
#X text 260 176 |;
#X text 260 186 |;
#X text 260 154 |;
#X text 260 164 |;
#X text 260 149 ^;
#X text 351 139 >;
#X text 136 192 | z^-D |;
#X text 300 192 | z^-D |;
#X text 120 139 x[n] ---------(+)--(+)----------- y[n];
#X text 127 224 y[n] = x[n] + a * x[n-D] + a * y[n-D];
#X text 261 192 -(*a)-;
#X text 188 191 -(*a)-;
#X obj 506 345 cnv 15 498 148 empty empty empty 20 12 0 14 #dcdcdc
#404040 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-Amp 4096 float 0;
#X coords 0 14.4994 4096 0 500 150 1;
#X restore 505 344 graph;
#X obj 557 128 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc
#000000 #000000;
#X text 580 127 Record/Analyze;
#N canvas 635 172 687 574 IR 0;
#X msg 279 185 stop;
#X msg 219 187 start;
#X obj 209 279 v length;
#X obj 159 279 t f f;
#X obj 158 152 select 1 0;
#X obj 271 217 tabwrite~ \$0-IR;
#X obj 158 123 change;
#X obj 316 306 s \$0-IR;
#X obj 159 223 timer;
#X obj 271 32 inlet~;
#X obj 158 77 env~ 2048 1024;
#X obj 158 101 > 0;
#X obj 159 308 log 2;
#X obj 159 337 expr pow(2 \, $i1 + 1);
#X text 355 56 Records IR \, find power of two larger than its length
to resize the table., f 36;
#X obj 159 253 ms2samps;
#N canvas 81 160 548 498 FFT 0;
#X obj 269 118 bang~;
#X msg 332 181 1;
#X obj 79 116 rfft~;
#X msg 284 157 0;
#X obj 269 178 f;
#X obj 297 181 + 1;
#X msg 283 229 0;
#X obj 269 202 sel 1;
#X obj 397 277 switch~;
#X obj 248 86 trigger bang bang bang;
#X msg 397 180 set \$1 1;
#X obj 396 130 v w_size;
#X obj 79 82 tabreceive~ \$0-IR;
#X obj 79 217 tabwrite~ \$0-Amp;
#X obj 248 17 inlet;
#X obj 469 172 / 2;
#X msg 469 195 resize \$1;
#X obj 469 248 s \$0-Amp;
#X obj 269 429 s \$0-Amp;
#X obj 269 330 v w_size;
#X obj 269 356 / 2;
#X obj 269 381 pack;
#X msg 269 404 bounds 0 \$2 \$1 0;
#X obj 269 302 trigger bang float;
#X obj 269 277 array max \$0-Amp;
#X obj 79 143 mag~;
#X connect 0 0 4 0;
#X connect 1 0 8 0;
#X connect 2 0 25 0;
#X connect 2 1 25 1;
#X connect 3 0 4 1;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 4 1;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 0 24 0;
#X connect 9 0 13 0;
#X connect 9 1 1 0;
#X connect 9 2 3 0;
#X connect 9 2 11 0;
#X connect 10 0 8 0;
#X connect 11 0 10 0;
#X connect 11 0 15 0;
#X connect 12 0 2 0;
#X connect 14 0 9 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 18 0;
#X connect 23 0 19 0;
#X connect 23 1 21 1;
#X connect 24 0 23 0;
#X connect 25 0 13 0;
#X restore 85 460 pd FFT;
#X text 80 483 Analyze;
#X obj 224 500 v w_size;
#X floatatom 191 422 0 0 0 0 - - - 0;
#X obj 209 523 s window-size;
#X msg 230 449 resize \$1;
#X obj 230 473 s \$0-IR;
#X obj 191 393 change;
#X obj 159 364 t b a;
#X obj 85 428 del 50;
#X obj 482 160 initmess \; hz-set 1000 \; fb 0.8;
#X obj 383 309 table \$0-IR 44100;
#X msg 316 262 resize 44100 \, const 0, f 14;
#X obj 138 187 t b b;
#X obj 271 113 ffdelay~ -samps 1024;
#X connect 0 0 5 0;
#X connect 1 0 5 0;
#X connect 3 0 12 0;
#X connect 3 1 2 0;
#X connect 4 0 29 0;
#X connect 4 1 0 0;
#X connect 4 1 8 1;
#X connect 6 0 4 0;
#X connect 8 0 15 0;
#X connect 9 0 10 0;
#X connect 9 0 30 0;
#X connect 10 0 11 0;
#X connect 11 0 6 0;
#X connect 12 0 13 0;
#X connect 13 0 24 0;
#X connect 15 0 3 0;
#X connect 19 0 20 0;
#X connect 19 0 18 0;
#X connect 19 0 21 0;
#X connect 21 0 22 0;
#X connect 23 0 19 0;
#X connect 24 0 25 0;
#X connect 24 1 23 0;
#X connect 25 0 16 0;
#X connect 28 0 7 0;
#X connect 29 0 8 0;
#X connect 29 1 28 0;
#X connect 29 1 1 0;
#X connect 30 0 5 0;
#X restore 574 226 pd IR;
#X obj 558 253 out~;
#X obj 557 188 comb.filt~ 1000 50;
#N canvas 673 55 516 558 t60 0;
#X floatatom 137 165 0 0 0 0 - - - 0;
#X floatatom 137 116 7 0 0 0 - feedback - 0;
#X floatatom 225 168 0 0 0 0 - Hz - 0;
#X obj 137 188 t b f;
#X obj 169 211 v dB;
#X text 256 167 hertz;
#X text 103 282 T60;
#X obj 137 282 nbx 8 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12
#dcdcdc #000000 #000000 0 256;
#X floatatom 137 381 0 0 0 0 - - - 0;
#X floatatom 330 384 0 0 0 0 - - - 0;
#X obj 137 353 db2lin;
#X obj 137 141 lin2db;
#X text 343 197 period in ms;
#X obj 225 197 expr 1000 / $f1;
#X text 55 24 You can calculate the t60 from frequency (or period)
and gain coefficient input values. The opposite conversion from t60
to gain coefficient is also given:, f 56;
#X obj 348 251 v del_ms;
#X obj 137 309 expr -60 * del_ms/$f1 \; exp(log(0.001) * del_ms/$f1)
;
#X obj 137 254 expr 60 * del_ms/-dB;
#X text 194 116 gain coefficient;
#X text 179 384 <= coefficient =>;
#X text 52 448 Note how t60 depends on both a hertz value and a feedback
gain coefficient. This means that when in gain mode \, you have different
decay time parameters from the same feedback for different hertz values.
;
#X obj 225 221 trigger bang float;
#X connect 0 0 3 0;
#X connect 1 0 11 0;
#X connect 2 0 13 0;
#X connect 3 0 17 0;
#X connect 3 1 4 0;
#X connect 7 0 16 0;
#X connect 10 0 8 0;
#X connect 11 0 0 0;
#X connect 13 0 21 0;
#X connect 16 0 10 0;
#X connect 16 1 9 0;
#X connect 17 0 7 0;
#X connect 21 0 17 0;
#X connect 21 1 15 0;
#X restore 852 546 pd t60;
#X obj 737 273 out~;
#X obj 737 162 noise~;
#X obj 823 170 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 909 199 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 826 146 hsl 128 15 20 2000 1 0 empty empty empty -2 -8 0 10
#dcdcdc #000000 #000000 0 1;
#X obj 912 172 hsl 128 15 -0.99 0.99 0 0 empty empty empty -2 -8 0
10 #dcdcdc #000000 #000000 0 1;
#X text 30 431 The frequency response of a comb filter has many amplitude
peaks and valleys displayed harmonically (creating the image of a comb
\, hence the name). The fundamental frequency depends on the delay
period \, the feedback delay line promotes the peaks and the feedforward
the valleys. To the right you can record and analyze the impulse resonpose
of this filter. Note that the FFT analysis of the IR represents the
amplitude and phase response. The parameters are optimized for a good
visual result. Open the help file for more details., f 61;
#X text 523 25 We also have an example on using the object to filter
a noise source. The object can also take a gain parameter instead of
t60. This promotes different decay time values for the same gain parameter.
, f 47;
#X text 610 522 More details about the conversion between gain coefficient
and decay time:, f 42;
#X obj 889 43 declare -path else;
#X text 33 23 The Comb Filter is a type of resonator. The [comb.rev~]
object (which we'll see in the detail in the next section on reverberation)
has already been introduced in this tutorial. The [comb.filt~] object
from ELSE is a simplification that has a frequency input and a decay
time in t60 by default \, but it can also take a gain coefficient.
See filter diagram below:;
#X text 39 282 Where "a" is the gain coefficient and D is the delay
time \, which is the period of the input frequency in ms (D = 1000
/ hz). The gain coefficient as a function of t60 is given as: a = exp(log(0.001)
* D/t60)., f 58;
#X text 29 358 The [comb.rev~] object is similar \, but you can set
a different gain coefficient for the input \, the feedforward and the
feedback line. This simplification in [comb.filt~] aims for convenience
as a filter., f 61;
#X obj 737 226 comb.filt~ -gain 1000 0.9;
#X connect 0 0 45 0;
#X connect 41 0 0 0;
#X connect 45 0 43 0;
#X connect 45 0 44 0;
#X connect 48 0 60 0;
#X connect 49 0 60 1;
#X connect 50 0 60 2;
#X connect 51 0 49 0;
#X connect 52 0 50 0;
#X connect 60 0 47 0;
