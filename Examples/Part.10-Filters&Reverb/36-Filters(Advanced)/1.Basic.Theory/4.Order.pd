#N canvas 333 25 914 679 12;
#X declare -path else;
#X obj 101 375 cnv 15 330 30 empty empty empty 5 12 0 14 #e0e0e0 #404040
0;
#X text 107 382 y(n) = a0 * x(n) + a1 * x(n-1) + b1 * y(n-1);
#X obj 211 565 v a0;
#X obj 271 565 v a1;
#X obj 326 565 v b1;
#X floatatom 326 539 0 0 0.99 0 - - - 0;
#X floatatom 271 539 0 0 0.99 0 - - - 0;
#X floatatom 211 539 0 0 0.99 0 - - - 0;
#X obj 672 452 v a0;
#X obj 734 452 v a1;
#X obj 548 452 v b1;
#X floatatom 548 427 7 0 0.99 0 - - - 0;
#X floatatom 734 427 7 0 0.99 0 - - - 0;
#X floatatom 672 427 7 0 0.99 0 - - - 0;
#X floatatom 610 427 7 0 0.99 0 - - - 0;
#X obj 610 452 v b2;
#X floatatom 797 427 7 0 0.99 0 - - - 0;
#X obj 797 452 v a2;
#X obj 548 403 unpack float float float float float;
#X obj 541 517 noise~;
#X obj 558 325 cnv 15 290 32 empty empty empty 5 12 0 14 #e0e0e0 #404040
0;
#X obj 108 629 fexpr~ a0 * $x[0] + a1 * $x[-1] + b1 * $y[-1];
#X text 275 585 ff;
#X text 329 586 fb;
#X text 549 474 fb1;
#X text 616 474 fb2;
#X text 739 472 ff1;
#X text 802 472 ff2;
#X obj 541 593 out~;
#X text 49 341 The difference equation of the above diagram is:;
#X text 111 564 coefficients:;
#X text 210 584 gain;
#X text 569 325 y(n) = a0 * x(n) + a1 * x(n-1) + a2 * x(n-2) + b1 *
y(n-1) + b2 * y(n-2), f 36;
#X text 513 57 And now for a second order filter diagram with two samples
delay \, difference equation and [fexpr~] implementation:, f 46;
#X text 670 471 gain;
#X obj 548 377 initmess 1.99 -0.995 0.00246 0 -0.00246;
#X obj 712 18 declare -path else;
#X obj 46 154 pic 0 ../files/FOS.gif empty empty 0 0;
#X obj 515 117 pic 0 ../files/SOS.gif empty empty 0 0;
#X text 54 26 A first order filter has a decay of 6dB per octave \,
a second order has 12 dB \, fourth has 24 and so on. Filters in cascade
sum their orders (two 1st order filters become 2nd order). The number
of delayed samples defines the order \, where a first order filter
can only have one sample delay for a feedforward and a feedback line.
Here's a "First Order System" filter diagram:;
#X text 73 446 Where "a1" is the feedforward (ff) coefficient \, "b1"
the feedback (fb) coefficient and "a0" is a gain coefficient applied
to the input signal (independently from the feedforward signal). Here's
an implementation of this in [fexpr~]:, f 55;
#X obj 541 550 fexpr~ a0 * $x1[0] + a1 * $x1[-1] + a2 * $x1[-2] + b1
* $y1[-1] + b2 * $y1[-2], f 49;
#X connect 5 0 4 0;
#X connect 6 0 3 0;
#X connect 7 0 2 0;
#X connect 11 0 10 0;
#X connect 12 0 9 0;
#X connect 13 0 8 0;
#X connect 14 0 15 0;
#X connect 16 0 17 0;
#X connect 18 0 11 0;
#X connect 18 1 14 0;
#X connect 18 2 13 0;
#X connect 18 3 12 0;
#X connect 18 4 16 0;
#X connect 19 0 41 0;
#X connect 35 0 18 0;
#X connect 41 0 28 0;
