#N canvas 362 59 777 559 12;
#X declare -path else;
#X obj 126 431 tabread4~ \$0-noise;
#X floatatom 203 390 7 0 0 0 - - - 0;
#X obj 126 392 *~;
#X obj 203 358 expr sr / $f1;
#X obj 29 169 cnv 15 398 98 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-noise 44100 float 0;
#X coords 0 1 44099 -1 400 100 1 0 0;
#X restore 28 168 graph;
#X obj 203 313 nbx 5 16 1 1000 0 0 empty freq empty 0 -8 0 11 #dcdcdc #000000 #000000 0 256;
#X obj 126 473 out~;
#X text 132 311 Frequency;
#X text 263 390 Period in samples;
#X obj 288 433 initmess \; freq 60;
#X obj 232 135 tabgen \$0-noise noise;
#X obj 538 20 declare -path else;
#X text 20 14 Here we use [tabgen] to generate a table with white noise. More about noise is coming right next in the next section \, but we can advance that it is generated with random numbers \, so the table is populated with random values between -1 and 1!, f 62;
#X msg 232 105 noise;
#X text 278 104 reinitialize array;
#X obj 126 358 phasor~;
#X obj 552 243 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 536 308 else/out~;
#X text 612 242 <- frequency;
#X obj 536 276 else/oscnoise~ 440;
#X obj 537 200 bng 20 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X text 563 201 update noise table;
#X obj 378 476 v sr;
#X obj 378 452 sr~;
#X text 496 73 Here we use [phasor~] and [tabread4~] to implement some sort of wavetable oscillator like [tabosc4~] \, but in this way we can choose a proper size of the table that correspond to a frequency/period., f 31;
#X text 500 413 Above we have the [oscnoise~] object from ELSE that implements an oscillator like this \, with a random table that you can update by sending a bang., f 33;
#X connect 0 0 7 0;
#X connect 1 0 2 1;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 6 0 3 0;
#X connect 6 0 16 0;
#X connect 14 0 11 0;
#X connect 16 0 2 0;
#X connect 17 0 20 0;
#X connect 20 0 18 0;
#X connect 21 0 20 0;
#X connect 24 0 23 0;
