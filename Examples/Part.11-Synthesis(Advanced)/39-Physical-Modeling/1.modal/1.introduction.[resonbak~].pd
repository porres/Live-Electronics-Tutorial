#N canvas 339 58 1009 672 12;
#X declare -path else;
#X obj 647 238 keyboard 15 60 2 3 0 0 empty empty;
#X obj 647 316 stripnote;
#X obj 647 356 mtof;
#X obj 790 346 / 127;
#X obj 754 362 *~;
#X obj 754 314 white~ -clip;
#X obj 647 482 out~;
#X obj 768 559 plaits~, f 11;
#X text 489 62 Besides mathematical solutions to wave equations (e.g. \, for plates \, strings \, membranes) \, the parameters may come from experimental measurements and you can use spectral analysis and even something like [sigmund~] to extract these parameters from a sample., f 65;
#X text 561 552 Also check [plaits~] and its modal resonator engine., f 27;
#X obj 759 30 declare -path else;
#X obj 647 396 resonbank~ -partial 1 2 2.803 3.871 5.074 7.81 10.948 14.421 -decay 1000 205 1000 196 339 47 58 47 -amp 1 0.044 0.891 0.0891 0.794 0.1 0.281 0.079, f 31;
#X text 32 191 Typically the modes are implemented and modeled as a damped sinusoidal oscillator \, so you can think of [damp.osc~] (based on [resonator2~]) and [resonbank2~] \, which is kind of a bank of [damp.osc~] objects. But you can also just use [resonator~] and other filters for designing cool sounds based on this technique.;
#X text 32 523 For a circular drumhead \, the resonant frequencies follow the Bessel function solutions to the wave equation. The damping (decay) factors controls how fast each mode dies out \, which depends on the physical characteristics (material damping \, air resistance \, and how the object is struck). The amplitudes dictate how much each mode contributes to the sound and may depend on where the object is struck. For example \, striking the center of a drum excites the fundamental mode more. Striking off-center excites higher modes more.;
#X text 32 29 Modal synthesis is a physical modeling technique that us useful for synthesizing resonant and percussive sounds \, like strings \, bells \, gongs \, plates and whatnot. The technique represents a sound as a sum of resonant 'modes' (hence the name) \, each with its own frequency \, amplitude and amplitude damping time \, since amplitudes are often modeled with an exponential decay. It focuses on how objects vibrate in response to excitation and we can then implement it with resonant filters and an excitation signal. ELSE has the [resonbank~] and [resonbank2~] objects that are well suited for this.;
#X text 32 284 In Modal Synthesis \, each oscillator represents a natural vibration mode of a physical object \, with parameters like frequency and energy decay determined by the material and shape of the object. The boundary conditions (how the object is fixed or free to vibrate) also contributes.;
#X text 32 361 You can realize that modal synthesis is similar to additive synthesis \, since both represent sounds as a sum of sinusoidal components. Hence \, the differences are subtle \, where modal synthesis is a physically informed approach to additive synthesis \, focusing on how objects resonate rather than freely designing harmonic or inharmonic components. The parameters then come from physical measurements or mathematical models of vibrating objects. This means that you can have parameters and formulas that change according to the physical characteristics you're trying to emulate \, such as string tension \, striking position and so on...;
#X text 537 368 see also:;
#X obj 537 394 resonator~;
#X text 490 141 Here's a simple modal synthesis patch and how to use [resonbak~] \, which is a bank of [resonator~] objects. We have a clipped noise burst as an excitation signal. This is basically the example of the help file \, so check that out as well. In short \, we have a partial/harmonic list \, plus amplitude and decay in t60 for each mode., f 65;
#X text 510 604 Note that we're using the default 'bandpass' mode of [resonbak~] \, which is the common thing to do for Modal Synthesis. In the next example we have more patches by presenting [resonbank2~]., f 66;
#X obj 790 369 decay~ 250;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 3 0;
#X connect 2 0 11 0;
#X connect 3 0 21 0;
#X connect 4 0 11 1;
#X connect 5 0 4 0;
#X connect 11 0 6 0;
#X connect 21 0 4 1;
