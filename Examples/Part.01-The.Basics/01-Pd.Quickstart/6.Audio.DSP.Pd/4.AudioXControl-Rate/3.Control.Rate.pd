#N canvas 217 48 1001 636 12;
#X declare -path else;
#X obj 189 320 osc~;
#X obj 189 260 sig~ 440;
#X obj 617 302 noise~;
#X obj 693 290 hsl 128 15 250 1000 1 0 empty cutoff empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 690 316 6 0 0 0 - - - 0;
#X obj 189 355 out~;
#X obj 660 386 out~;
#X text 288 287 audio signal controlling the frequency, f 13;
#X text 48 121 The idea is that it's not necessary to have a high time resolution for control data input. So we use control objects to control the patch's parameters and save on CPU power. But there are cases where control needs to be performed by audio signals at a high rate. This means audio is also used to control parameters and that some audio objects will have audio inputs for parameter control \, such as [osc~] below \, which takes both control rate and audio rate to set the frequency.;
#X text 533 73 Now \, funny enough \, Pd has no fixed control rate. This means control objects have no timing restrain and can be very precise. Moreover \, they can operate in a higher rate than the sample rate! However \, it'd be silly and useless to generate control values at a rate higher than the sample rate \, and also counterproductive to generate them at the audio rate \, because the CPU cost would be huge and we have audio objects for that.;
#X text 542 460 In this case \, it doesn't really matter if control data can be generated at a higher rate \, because only one control value for the cutoff frequency will affect the audio block output., f 60;
#X text 48 23 We've seen how audio objects operate in the Sample Rate. Computer music systems commonly have a distinction between a given sample rate and a control rate (which is the rate that control messages will be processed). In this case \, the audio rate is the maximum resolution rate and the control rate is supposed to be much lower.;
#X text 49 425 This might be a little confusing \, as many expect audio just to represent sound waves we listen to. In the case of frequency input above \, it's quite unnecessary as we have a static value \, but it would be necessary for Frequency Modulation \, as we'll see later on., f 62;
#X text 49 506 Ok \, so \, if normally there's a control rate in computer music systems that's lower in resolution than the audio rate \, what is it normally? The answer is that it depends on the system. Max/MSP has a default resolution of 2 ms \, which can be set to as low as 1 ms. SuperCollider's control rate depends on the block size and sample rate \, so a rate of 44.1 khz and a block of 64 samples defines a control rate of about 1.45 ms., f 62;
#X text 543 523 So even though Pd does not restrict to a minimum control rate \, this structure (where control messages can only affect a block of audio once) generates in practice an intrinsical control rate for Pd that also depends on the block size and sample rate!;
#X obj 808 32 declare -path else;
#X obj 189 287 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X text 260 287 <--;
#X obj 782 321 hsl 128 15 1 20 1 0 empty cutoff empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X floatatom 779 347 5 0 0 0 - - - 0;
#X text 818 347 Q;
#X obj 660 346 bp~ 500 5;
#X text 533 201 Notwidstandingly \, another issue is that not all audio objects in Pd have inlets that accept audio signals. The [bp~] object below \, which is a bandpass filter \, only accepts control data for the center frequency and resonance (Q).;
#X text 734 316 freq;
#X connect 0 0 5 0;
#X connect 1 0 16 0;
#X connect 2 0 21 0;
#X connect 3 0 4 0;
#X connect 4 0 21 1;
#X connect 16 0 0 0;
#X connect 18 0 19 0;
#X connect 19 0 21 2;
#X connect 21 0 6 0;
