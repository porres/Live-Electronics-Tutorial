#N canvas 297 29 864 678 12;
#X declare -path else;
#X obj 683 15 declare -path else;
#X obj 303 140 setdsp~;
#X obj 94 131 sig~ 1;
#X obj 168 131 sig~ 2;
#X obj 175 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 94 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 633 107 osc~ 440;
#X obj 707 107 osc~ 880;
#X obj 187 411 clone;
#X obj 488 318 nchs~;
#X obj 94 165 snake~ in 2;
#X obj 94 199 snake~ out 2;
#X obj 633 141 snake~ in 2;
#X obj 633 173 out.mc~;
#X text 33 21 Pd also has support for connections with multichannel signals. That is a single connection cable transmitting more than one channel of audio. Use the [snake~] object to combine single channels into a multichannel signal (as [snake~ in]). conversely \, use [snake~ out] to extract the channels separately., f 55;
#X text 37 310 As of Pd 0.54 \, many built in objects have support for multi channel signals. The [inlet~] object deals with multichannel inputs \, so this means you can have abstractions that deal with multichannel signals and send multichannel signals to a [pd~] object as well. The [clone] object also handles multichannels Check its help file., f 53;
#X obj 488 342 sum~;
#X obj 488 366 merge~;
#X obj 488 440 pick~;
#X obj 488 487 get~;
#X text 560 316 get the number of channels;
#X text 560 341 sum all channels, f 20;
#X text 560 365 merge signals with any channel number;
#X text 560 439 pick a single channel;
#X text 560 486 get one or more channels;
#X text 37 269 * The [numbox~] object above is able to monitor signal inputs., f 53;
#X text 252 235 <-- [numbox~] *;
#X obj 488 292 sigs~;
#X text 560 290 generate multichannel signal from list;
#X obj 476 173 out.mc~;
#X text 42 458 The [adc~] and [dac~] objects have support as described before. Next \, we have the [out.mc~] abstraction that is also based on [dac~] and takes a multichannel inputs and distributes the channels., f 48;
#X obj 488 390 unmerge~;
#X obj 488 415 slice~;
#X text 560 389 unmerge signals into channel groups;
#X text 560 414 split multichannel signals;
#X obj 488 464 repeat~;
#X text 560 463 repeat a signal;
#X text 465 239 Many objects in ELSE support multichannals. Here is some of them that are multi channel tools:, f 54;
#X text 459 57 The [sine~] object is an oscillators that can also generate a multichannel signal output and is the same to the right., f 50;
#X obj 218 592 out~;
#X text 382 569 note \, however \, thar a multichannel signal input into [out~] gets summed up automatically. This is because this abstraction has a [sum~] object internally \, which sums all multichannel signals into a single channel., f 57;
#X obj 218 562 sine~ -mc 440 880;
#X obj 476 143 sine~ -mc 440 880;
#X connect 2 0 10 0;
#X connect 3 0 10 1;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 4 0;
#X connect 12 0 13 0;
#X connect 41 0 39 0;
#X connect 42 0 29 0;
