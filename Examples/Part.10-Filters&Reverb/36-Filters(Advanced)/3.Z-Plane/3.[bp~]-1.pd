#N canvas 395 53 874 579 12;
#X declare -path else;
#X obj 534 253 cpole~, f 12;
#X obj 539 294 cpole~, f 33;
#X obj 506 214 *~;
#X obj 471 182 noise~;
#X obj 278 170 nbx 5 14 0.1 100 1 0 \$0-Q \$0-q_set empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X floatatom 141 225 8 0 0 0 - - - 0;
#X obj 284 256 v g;
#X msg 524 155 \$3;
#X obj 211 312 noise~;
#X obj 141 253 v a1;
#X obj 213 253 v a2;
#X obj 69 298 noise~;
#X obj 148 170 nbx 8 14 100 20000 1 0 \$0-freq-send \$0-freq empty
0 -8 0 10 #dcdcdc #000000 #000000 0 100;
#X text 127 169 Hz;
#X obj 102 355 nbx 5 14 1 100 1 0 empty \$0-Q empty 0 -8 0 10 #dcdcdc
#000000 #000000 0 256;
#X obj 78 331 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-freq-send empty 0
-8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 69 355 bp~;
#X obj 211 346 fexpr~ g * $x[0] + a1 * $y[-1] + a2 * $y[-2], f 30
;
#X obj 55 114 cnv 15 330 20 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#X text 65 114 y[n] = g * x[n] + a1 * y[n-1] + a2 * y[n-2];
#X floatatom 524 182 8 0 0 0 - - - 0;
#X obj 539 327 out~;
#X obj 211 398 out~;
#X obj 69 398 out~;
#N canvas 761 216 488 480 coefficients 0;
#X obj 99 48 inlet;
#X obj 50 48 inlet;
#X obj 216 263 v r;
#X obj 327 257 v omega;
#X obj 272 288 v oneminusr;
#N canvas 1008 151 422 270 init 0;
#X msg 76 150 500;
#X obj 257 88 v pi;
#X obj 260 149 v sr;
#X obj 257 62 pi;
#X obj 157 161 s \$0-q_set;
#X obj 76 77 loadbanger 2;
#X obj 259 122 sr~;
#X obj 76 174 s \$0-freq;
#X msg 157 129 set 1;
#X connect 0 0 7 0;
#X connect 3 0 1 0;
#X connect 5 0 0 0;
#X connect 5 1 8 0;
#X connect 5 1 3 0;
#X connect 5 1 6 0;
#X connect 6 0 2 0;
#X connect 8 0 4 0;
#X restore 372 163 pd init;
#X obj 99 87 t b f;
#X obj 50 159 expr omega \; - r * r \; 2 * oneminusr * (oneminusr +
r * omega) \; 1 - oneminusr \; min(omega / $f2 \, 1) \; $f1 * 2*pi
/ sr;
#N canvas 526 56 548 260 a1 0;
#X obj 58 53 inlet;
#X obj 58 192 outlet;
#X obj 426 145 v g;
#X obj 58 93 expr (((g*g*g * (-1/720) + g*g*(1/24)) - g*0.5) + 1) \;
$f1 * $f1;
#X obj 58 145 expr max(2 * $f1 * r \, -1);
#X connect 0 0 3 0;
#X connect 3 0 4 0;
#X connect 3 1 2 0;
#X connect 4 0 1 0;
#X restore 50 256 pd a1;
#X obj 82 380 unpack float float float;
#X obj 247 413 outlet;
#X obj 164 413 outlet;
#X obj 82 413 outlet;
#X obj 82 315 s \$0-coefficients;
#X obj 82 351 r \$0-coefficients;
#X text 59 21 Hz;
#X text 106 24 Q;
#X text 183 73 This is how we get the coefficients from the Hz and
Q input. This is taken from [bp~]'s source code., f 38;
#X obj 82 284 pack f f f;
#X obj 50 130 pack float 1;
#X connect 0 0 6 0;
#X connect 1 0 19 0;
#X connect 6 0 19 0;
#X connect 6 1 19 1;
#X connect 7 0 8 0;
#X connect 7 1 18 1;
#X connect 7 2 18 2;
#X connect 7 3 2 0;
#X connect 7 4 4 0;
#X connect 7 5 3 0;
#X connect 8 0 18 0;
#X connect 9 0 12 0;
#X connect 9 1 11 0;
#X connect 9 2 10 0;
#X connect 14 0 9 0;
#X connect 18 0 13 0;
#X connect 19 0 7 0;
#X restore 148 196 pd coefficients;
#X f 19;
#X text 31 20 The [bp~] filter has 2 complex poles \, here's the difference
equation and a subpatch that generates the coefficients from a frequency
and Q input \, the coefficients are loaded inside [fexpr~] for comparison:
, f 50;
#X text 484 154 gain;
#N canvas 495 81 862 659 Poles 0;
#X obj 587 587 outlet;
#X obj 525 587 outlet;
#X text 135 104 X =;
#X text 171 94 -b;
#X text 188 89 +;
#X text 188 97 -;
#X text 162 101 __________________________;
#X text 200 93 sqrt(b^2 - 4.ac);
#X text 228 117 2.a;
#X obj 525 84 inlet;
#X obj 686 161 unpack;
#X text 665 160 a1;
#X text 152 331 X =;
#X text 205 316 +;
#X text 205 324 -;
#X text 179 328 __________________________;
#X text 193 321 b;
#X text 217 320 sqrt(b^2 - 4.c);
#X text 154 240 X =;
#X text 207 225 +;
#X text 207 233 -;
#X text 181 237 __________________________;
#X text 190 229 a1;
#X text 219 229 sqrt(a1^2 + 4.a2);
#X text 247 253 2;
#X obj 686 195 v b;
#X obj 725 195 v c;
#X text 734 162 a2;
#X obj 525 206 expr pow(b \, 2) + 4*c;
#X obj 525 132 trigger bang list;
#X text 569 83 (a1 a2 b0);
#X obj 525 234 trigger bang float float;
#X obj 607 338 route 0 1;
#X obj 607 285 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000 0 1;
#X obj 607 311 pack float float;
#X obj 637 362 abs;
#X obj 637 386 sqrt;
#X obj 591 386 sqrt;
#X obj 607 260 < 0;
#X floatatom 637 408 5 0 0 0 - - - 0;
#X floatatom 591 407 5 0 0 0 - - - 0;
#X floatatom 525 546 7 0 0 0 - - - 0;
#X obj 711 587 outlet;
#X obj 649 587 outlet;
#X obj 637 429 v im;
#X obj 591 429 v re;
#X obj 525 459 expr (b + re) / 2 \; im / 2 \; (b - re) / 2 \; -im /
2, f 27;
#X text 532 526 re;
#X text 593 526 im;
#X text 652 526 re;
#X text 720 526 im;
#X text 240 342 2;
#X text 191 490 +;
#X text 191 498 -;
#X text 179 495 b;
#X text 192 516 2;
#X text 203 494 re;
#X text 167 501 _________;
#X text 378 489 +;
#X text 378 497 -;
#X text 389 514 2;
#X text 390 493 im;
#X text 371 500 _______;
#X text 103 556 +;
#X text 103 564 -;
#X text 47 150 Where "a" should be a feedback coefficient gain "a0"
\, but this is "1" in our case \, so it gets ignored. In out difference
equation variables: a1 = b & a2 = c \, with a detail \, the signs are
reversed \, so we have:;
#X text 89 292 Or \, with the original terms:;
#X text 43 58 The pole extraction is based in bhaskara:;
#X text 85 507 Real Part =;
#X text 256 506 Imaginary Part =;
#X text 69 559 the ( ) indicates how to extract both poles (one with
"+" \, the other with "-").;
#X text 521 46 Let's finally calculate this in a patch:;
#X text 625 284 complex;
#X text 52 381 If (b^2 - 4.c) is negative \, we're extracting a square
root of a negative value \, hence we're dealing with a complex number!
That means: a Complex Pole! So we need to check if it's positive or
negative. If positive \, this is the real part and the imaginary part
is 0 \, but if negative \, it's the imaginary part and the real part
is 0 - we then have both parts as:;
#X text 549 611 pole 1;
#X text 674 611 pole 2;
#X floatatom 587 546 7 0 0 0 - - - 0;
#X floatatom 711 546 7 0 0 0 - - - 0;
#X floatatom 649 546 7 0 0 0 - - - 0;
#X connect 9 0 29 0;
#X connect 10 0 25 0;
#X connect 10 1 26 0;
#X connect 28 0 31 0;
#X connect 29 0 28 0;
#X connect 29 1 10 0;
#X connect 31 0 46 0;
#X connect 31 1 38 0;
#X connect 31 2 34 1;
#X connect 32 0 37 0;
#X connect 32 1 35 0;
#X connect 33 0 34 0;
#X connect 34 0 32 0;
#X connect 35 0 36 0;
#X connect 36 0 39 0;
#X connect 37 0 40 0;
#X connect 38 0 33 0;
#X connect 39 0 44 0;
#X connect 40 0 45 0;
#X connect 41 0 1 0;
#X connect 46 0 41 0;
#X connect 46 1 76 0;
#X connect 46 2 78 0;
#X connect 46 3 77 0;
#X connect 76 0 0 0;
#X connect 77 0 42 0;
#X connect 78 0 43 0;
#X restore 587 155 pd Poles;
#X f 29;
#X text 263 168 Q;
#X obj 695 21 declare -path else;
#X obj 587 122 r \$0-coefficients;
#X floatatom 284 225 8 0 0 0 - - - 0;
#X floatatom 213 225 8 0 0 0 - - - 0;
#X floatatom 787 214 8 0 0 0 - - - 0;
#X floatatom 720 214 8 0 0 0 - - - 0;
#X floatatom 653 214 8 0 0 0 - - - 0;
#X floatatom 588 214 8 0 0 0 - - - 0;
#X text 18 196 open and check =>;
#X text 55 473 Even though the coefficients' values are real inside
[fexpr~] \, we're dealing with complex poles. More precisely a conjugate
pair \, where the imaginary values are mirrrored and get cancelled
out., f 46;
#X obj 471 472 biquad~;
#X obj 504 410 r \$0-coefficients;
#X obj 504 434 list append 0 0;
#X obj 471 504 out~;
#X text 443 54 And see how we can also implement this filter with two
[cpole~] objects (complex pole filters) below. Open [pd Poles] to seee
how to extract poles from the input coefficients., f 54;
#X text 601 493 One can use [biquad~] as well. We just add to the list
two zeros that represent the unused 2-Zeros., f 34;
#X connect 0 0 1 0;
#X connect 0 1 1 1;
#X connect 1 0 21 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 3 0 39 0;
#X connect 4 0 24 1;
#X connect 5 0 9 0;
#X connect 7 0 20 0;
#X connect 8 0 17 0;
#X connect 11 0 16 0;
#X connect 12 0 24 0;
#X connect 14 0 16 2;
#X connect 15 0 16 1;
#X connect 16 0 23 0;
#X connect 17 0 22 0;
#X connect 20 0 2 1;
#X connect 24 0 5 0;
#X connect 24 1 32 0;
#X connect 24 2 31 0;
#X connect 27 0 36 0;
#X connect 27 1 35 0;
#X connect 27 2 34 0;
#X connect 27 3 33 0;
#X connect 30 0 7 0;
#X connect 30 0 27 0;
#X connect 31 0 6 0;
#X connect 32 0 10 0;
#X connect 33 0 1 3;
#X connect 34 0 1 2;
#X connect 35 0 0 3;
#X connect 36 0 0 2;
#X connect 39 0 42 0;
#X connect 40 0 41 0;
#X connect 41 0 39 0;
