#N canvas 729 59 545 443 12;
#X declare -path else;
#X text 279 189 cents;
#X obj 325 189 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-cents empty 0 -8
0 10 -228856 -1 -1 100 256;
#X obj 328 169 hsl 128 15 -2400 2400 0 0 empty empty empty -2 -8 0
10 -228856 -1 -1 0 1;
#N canvas 403 131 1098 606 Pitch-Shift_PVoc 0;
#X obj 383 555 outlet~;
#X obj 74 456 table \$0-re 1024;
#X obj 74 475 table \$0-im 1024;
#X text 66 356 Tabelas:;
#X obj 264 158 bang~;
#X obj 264 266 +~;
#X obj 308 185 pack float float float;
#X obj 352 12 inlet;
#X text 348 161 *;
#X text 409 161 *;
#X text 474 160 *;
#X text 536 225 *;
#X obj 319 160 / 4;
#X obj 448 160 / 4;
#X obj 504 224 /~ 4;
#X msg 264 213 \$1 \, \$2 \$3;
#X obj 264 186 list;
#X obj 383 160 / 4;
#X obj 533 177 v length_\$0;
#X obj 264 236 vline~;
#X obj 127 188 v window_ms_\$0;
#X obj 134 139 v window_\$0;
#X obj 118 249 block~;
#X msg 118 224 set \$1 4;
#X msg 118 112 2048;
#X msg 66 260 100;
#X obj 66 283 s \$0-cents;
#X obj 127 163 samps2ms;
#X text 151 110 window;
#X obj 66 113 lb 2;
#X text 69 84 init;
#X obj 383 461 rifft~;
#X obj 383 520 expr~ $v1 * 2 / (window_\$0 * 3);
#X obj 342 388 rfft~;
#X obj 414 388 rfft~;
#X obj 342 363 hann~;
#X obj 414 364 hann~;
#X obj 383 489 hann~;
#X text 460 423 Same old...;
#N canvas 377 157 654 496 Phase.Accum 0;
#X obj 205 427 outlet~;
#X obj 426 424 outlet~;
#X obj 205 322 expr~ ($v1 * $v3) - ($v2 * $v4) \; ($v2 * $v3) + ($v1
* $v4);
#X obj 243 34 inlet~;
#X obj 296 34 inlet~;
#X obj 375 34 inlet~;
#X obj 426 34 inlet~;
#X obj 75 123 expr~ ($v1 * $v3) + ($v2 * $v4) \; ($v2 * $v3) - ($v1
* $v4);
#N canvas 228 78 542 340 phase_lock 0;
#X obj 385 133 lrshift~ 1;
#X obj 300 133 lrshift~ -1;
#X obj 285 225 +~;
#X obj 285 255 outlet~;
#X obj 283 47 inlet~;
#X obj 300 189 +~;
#X obj 157 137 lrshift~ 1;
#X obj 72 137 lrshift~ -1;
#X obj 57 229 +~;
#X obj 57 259 outlet~;
#X obj 55 51 inlet~;
#X obj 72 193 +~;
#X connect 0 0 5 1;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 4 0 0 0;
#X connect 4 0 1 0;
#X connect 4 0 2 0;
#X connect 5 0 2 1;
#X connect 6 0 11 1;
#X connect 7 0 11 0;
#X connect 8 0 9 0;
#X connect 10 0 6 0;
#X connect 10 0 7 0;
#X connect 10 0 8 0;
#X connect 11 0 8 1;
#X restore 138 219 pd phase_lock;
#X obj 448 390 tabsend~ \$0-re;
#X obj 458 367 tabsend~ \$0-im;
#X obj 42 52 tabreceive~ \$0-re;
#X obj 99 77 tabreceive~ \$0-im;
#N canvas 362 104 559 245 norm 0;
#X obj 352 180 outlet~;
#X obj 57 187 outlet~;
#X obj 317 31 inlet~;
#X obj 68 29 inlet~;
#X obj 57 127 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2
/ sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 68 71 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 180 265 pd norm;
#X connect 2 0 0 0;
#X connect 2 0 9 0;
#X connect 2 1 1 0;
#X connect 2 1 10 0;
#X connect 3 0 7 2;
#X connect 4 0 7 3;
#X connect 5 0 2 2;
#X connect 6 0 2 3;
#X connect 7 0 8 0;
#X connect 7 1 8 1;
#X connect 8 0 13 0;
#X connect 8 1 13 1;
#X connect 11 0 7 0;
#X connect 12 0 7 1;
#X connect 13 0 2 0;
#X connect 13 1 2 1;
#X restore 351 423 pd Phase.Accum;
#X obj 352 42 cents2ratio;
#X obj 352 73 expr max(-length_\$0 \, 0) \; max(length_\$0 \, 0) \;
window_ms_\$0 \; (1 - $f1) * window_ms_\$0 \; (window_ms_\$0 * $f1)
/ 4 \;;
#X text 504 250 new hop;
#X obj 264 291 delread4~ \$0-buffer;
#X obj 413 289 delread4~ \$0-buffer;
#X text 301 361 back;
#X text 459 364 front;
#X text 628 237 The cents interval is converted to ratio and used to
get a new window size (length_\$0). The direction of the reading depends
whether is negative or not. As before \, grains need to be apart by
a new hop size.;
#X text 630 303 Something new not yet told is that some objects (such
as the delay objects and [vline~]) will behave differently because
of the overlap. Actually \, under the hood in Pd \, an overlap changes
the sample rate. So here we divide by the overlap number (4) in different
locations marked with * for that reason.;
#X connect 4 0 16 0;
#X connect 5 0 43 0;
#X connect 6 0 16 1;
#X connect 7 0 40 0;
#X connect 12 0 6 0;
#X connect 13 0 6 2;
#X connect 14 0 5 1;
#X connect 15 0 19 0;
#X connect 16 0 15 0;
#X connect 17 0 6 1;
#X connect 19 0 5 0;
#X connect 19 0 44 0;
#X connect 23 0 22 0;
#X connect 24 0 23 0;
#X connect 24 0 21 0;
#X connect 24 0 27 0;
#X connect 25 0 26 0;
#X connect 27 0 20 0;
#X connect 29 0 25 0;
#X connect 29 1 24 0;
#X connect 31 0 37 0;
#X connect 32 0 0 0;
#X connect 33 0 39 0;
#X connect 33 1 39 1;
#X connect 34 0 39 2;
#X connect 34 1 39 3;
#X connect 35 0 33 0;
#X connect 36 0 34 0;
#X connect 37 0 32 0;
#X connect 39 0 31 0;
#X connect 39 1 31 1;
#X connect 40 0 41 0;
#X connect 41 0 12 0;
#X connect 41 1 17 0;
#X connect 41 2 13 0;
#X connect 41 3 18 0;
#X connect 41 4 14 0;
#X connect 43 0 35 0;
#X connect 44 0 36 0;
#X restore 325 213 pd Pitch-Shift_PVoc;
#X obj 325 263 out~;
#X text 52 66 Now we adapt the pitch shifter from the granular examples
to include the phase accumulation process \, which is implemented in
the cartesian form with phase lock on. Open the subpatch.;
#X obj 81 234 delwrite~ \$0-buffer 500;
#X text 105 368 Compare this pitch shifter with the earlier version
that only relies in granulation., f 43;
#X obj 343 26 declare -path else;
#X obj 81 200 play.file~ bubul.wav 1 1;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 9 0 6 0;
