#N canvas 369 57 856 423 12;
#X declare -path else;
#X obj 683 33 declare -path else;
#X obj 303 140 setdsp~;
#X obj 94 131 sig~ 1;
#X obj 168 131 sig~ 2;
#X obj 175 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 94 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 469 74 osc~ 440;
#X obj 543 74 osc~ 880;
#X obj 167 374 clone;
#X obj 521 304 nchs~;
#X obj 94 165 snake~ in 2;
#X obj 94 199 snake~ out 2;
#X obj 469 108 snake~ in 2;
#X obj 469 149 out.mc~;
#X text 33 21 Pd also has support for connections with multichannel signals. That is a single connection cable transmiting more than one channel of audio. Use the [snake~] object to combine single channels into a multichannel signal (as [snake~ in]). conversely \, use [snake~ out] to extract the channels separately., f 55;
#X text 34 277 As of Pd 0.54 \, many built in objects have support for multi channel signals. The [inlet~] object deals with multichannel inputs \, so this means you can have abstractions that deal with multichannel signals and send multichannel signals to a [pd~] object as well. The [clone] object also handles multichannels Check its help file., f 53;
#X text 588 105 The [adc~] and [dac~] objects have support as described before. Here we have the [out.mc~] abstraction that is also based on [dac~] and takes a multichannel inputs and distributes the channels., f 34;
#X text 465 242 Some other objects from ELSE that deal with multi channel signals:, f 55;
#X text 573 295 get the number of channels in a connection, f 27;
#X obj 527 347 sum~;
#X text 571 342 sum the channels to a single channel, f 20;
#X connect 2 0 10 0;
#X connect 3 0 10 1;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 4 0;
#X connect 12 0 13 0;
