#N struct 1017-DS-1 float number;
#N canvas 215 39 898 531 12;
#N canvas 657 482 168 154 graphic 0;
#X scalar 1017-DS-1 66.6 \;;
#X restore 144 457 pd graphic;
#X text 223 406 - data structure template;
#X text 223 458 - graphical display;
#X text 227 433 - some code;
#N canvas 267 129 828 475 code 0;
#X obj 596 333 pointer;
#X obj 452 129 loadbang;
#X obj 452 196 trigger float bang bang;
#X msg 610 230 clear;
#X msg 596 306 traverse pd-graphic \, bang;
#X obj 610 259 send pd-graphic;
#X text 24 113 We then use the [append] object to create and add this Data Structure in the [pd graphic] subpatch based on information it receives. In this case we only have a simple data structure that contains one float \, so [append] only needs a float in the left inlet to add it., f 56;
#X text 24 205 The first argument in [append] is the data structure template name as defined in a [struct] object ("DS-1" in our example) \, the remaining arguments are the declared data types ("number" in this case)., f 56;
#X text 24 272 The [append] object needs to know where to add the scalar \, this is done by receiving a pointer in the right inlet \, given by the [pointer] object. In Pd \, a "pointer" points at a certain data structure object in a subptach used for display., f 56;
#X obj 452 413 append \$0-DS-1 number;
#X text 24 19 In this subpatch we concentrate the code for managing data structures. Here \, we simply create an instance of the template we defined in the previous subpatch - which is a graphical object - also called a "scalar" in Pd (but the term is confusing as it relates to something else in math and computing)., f 56;
#X text 24 348 The "traverse" message to [pointer] tells which subpatch to look for data structures objects. Next \, a "bang" message outputs the head of the list of objects in that subpatch area - think of it as a pointer to the beginning of an empty list of objects \, with this pointer we can then "append" an object after the head with the [append] object., f 56;
#X msg 452 162 66.6;
#X text 487 349 add data structure template, f 9;
#X text 463 363 <--;
#X text 727 259 <-- clear subpatch, f 9;
#X text 606 364 <-- send pointer of the head of the list, f 20;
#X text 447 20 The patch below deals with all that and it starts by clearing the [pd graphic] subptach before adding the data structure. You can then see the added data structure object in the [pd graphic] subpatch \, which you can click and drag to change values or also click and type a new value., f 51;
#X connect 0 0 9 1;
#X connect 1 0 12 0;
#X connect 2 0 9 0;
#X connect 2 1 4 0;
#X connect 2 2 3 0;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X connect 12 0 2 0;
#X restore 163 432 pd code;
#N canvas 401 145 506 366 template-1 0;
#X obj 115 320 drawnumber number;
#X text 248 320 - drawing instruction;
#X text 286 168 - template;
#X obj 85 169 struct \$0-DS-1 float number;
#X text 40 114 Below we define a data structure template named "\$0-DS-1" \, which only holds a float data type called "number".;
#X text 40 29 The [struct] object declares and defines a data structure \, which is also called a "template" in Pd. You can only use one [struct] object per window. The first argument is the structure's name and the following arguments declares the variables.;
#X text 41 213 Now that we have our data structure declared and defined \, we can have drawing instructions for the graphical display. These are part of the Data Structure and must be in the same window as the [struct] object. Here we use the [drawnumber] to draw the float named "number".;
#X restore 121 407 pd template-1;
#X text 498 335 All of the contents of a display subpatch can also be saved as a text file \, and also restored from a file., f 50;
#X msg 575 394 write DS.txt \, clear;
#X msg 594 426 read DS.txt;
#X text 721 393 <= save and clear;
#X text 686 424 <= reload;
#X obj 575 459 s pd-graphic;
#X text 498 270 You can also right-click on a data structure object object and ask for properties \, where a textual representation of the data is given for visualization and editing., f 50;
#X text 500 147 Editing:;
#N canvas 916 277 450 323 display 0;
#X restore 636 136 pd display;
#N canvas 6 108 879 423 template-2 0;
#X text 50 140 - struct template;
#X text 166 310 - drawing instruction;
#X obj 608 300 pointer;
#X msg 608 266 traverse pd-display \, bang;
#X obj 471 180 trigger list bang bang;
#X obj 471 245 unpack f f f;
#X floatatom 471 300 3 0 0 0 - - - 0;
#X floatatom 516 300 3 0 0 0 - - - 0;
#X floatatom 562 300 3 0 0 0 - - - 0;
#X text 525 276 x;
#X text 570 276 y;
#X text 35 226 Note that the "float x" and "float y" declarations can be defined in any order position in [struct]., f 50;
#X text 548 147 <= click;
#X text 424 44 Now we also have in this subpatch the code to append an object. And since we have declared coordinates \, the [append] object can also receive values for "x" and "y" when appending an object to the list \, see below., f 50;
#X msg 471 149 127 50 50;
#X msg 622 211 \; pd-display clear, f 17;
#X obj 643 180 loadbang;
#X obj 75 310 drawnumber n;
#X text 480 276 n;
#X obj 53 163 struct \$0-DS-2 float n float x float y;
#X text 86 63 Data Structure named "\$0-DS-2" holding a float called "n" plus "x" and "y" coordinates., f 30;
#X obj 471 335 append \$0-DS-2 n x y;
#X connect 2 0 21 3;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 4 1 3 0;
#X connect 4 2 15 0;
#X connect 5 0 6 0;
#X connect 5 1 7 0;
#X connect 5 2 8 0;
#X connect 6 0 21 0;
#X connect 7 0 21 1;
#X connect 8 0 21 2;
#X connect 14 0 4 0;
#X connect 16 0 15 0;
#X restore 614 110 pd template-2;
#X text 490 16 Coordinates:;
#X text 498 42 Each [struct] object has a special variable field named "x" and "y" for "x/y" coordinates. Check the [pd template-2] subpatch., f 50;
#X text 716 109 - template;
#X text 715 137 - graphics;
#X text 27 16 This appendix presents a tutorial on how to deal with Data Structures in Pd., f 62;
#X text 27 261 It's advisable to use dedicated subpatches when dealing with Data Structures in Pd. Most importantly \, one is necessary to display the graphical objects and another is needed as a data structure template (containing a data structure declaration with [struct] along with drawing instructions). We can also have yet another subpatch to organize some of the code that deals with the data structures \, but it's not essential that this code is treated apart. See the example below., f 62;
#X text 498 176 When in edit mode \, you can select a graphical data structure object and do the usual cut \, copy \, paste and duplicate operations. You can also drag and move them around (but note that in order to be moved \, the object needs to have "x/y" coordinates declared in the [struct])., f 50;
#X text 27 58 A data structure is a data organization \, management and storage format that enables access and modification of the data. Pd also offers the ability to attach shapes and colors to the data in order to visualize it and/or edit it graphically. Thus \, in Pd \, a Data Structure is a graphical object to be used in different ways \, such as a simple visual representation of data or as a graphical score that controls a patch. It can also be used to design graphical interface objects (GUI)., f 62;
#X text 27 200 In Pd we have four data types for data structures \, they are: float \, symbol \, text and array. Different data types can be grouped in a "struct" \, declared in Pd via the [struct] object., f 62;
#X connect 7 0 11 0;
#X connect 8 0 11 0;
