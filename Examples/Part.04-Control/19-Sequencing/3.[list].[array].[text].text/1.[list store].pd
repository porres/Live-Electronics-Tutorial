#N canvas 274 114 941 700 12;
#X declare -path else;
#X obj 731 47 declare -path else;
#X obj 231 589 *~;
#X obj 231 620 out~;
#X obj 156 541 bl.square~;
#X obj 156 477 list store 150 100 80 120 60 150 100 70 100, f 21;
#X msg 156 444 get \$1;
#X obj 202 328 + 1;
#X floatatom 156 414 5 0 0 0 - - - 0;
#X obj 156 328 float;
#X text 79 339 counter =>;
#X obj 156 248 tgl 25 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 156 294 metro 1 160 permin;
#X msg 88 217 tempo \$1 permin;
#X floatatom 88 186 5 0 0 0 - - - 0;
#X text 128 185 change tempo;
#X text 59 32 This section shows how to use basic Vanilla goodies for sequencing \, namely [list store] \, arrays and [text] objects. Let's start with [list store] \, where you can simply cycle thrgouh the list elements., f 67;
#X text 59 85 For the sequencer \, we need a beat clock \, so we use [metro] \, running at one beat of 160 BPM (beats per minute). You can change the tempo with the 'tempo' message \, you can also change the beat length via the right inlet (but we're not doing that and you can check the help file for more details)., f 67;
#X obj 156 352 mod 9;
#X obj 156 385 hradio 19 1 0 9 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#X text 80 414 0 to 8 =>;
#X msg 300 432 110 190 230 170 140 280 200 250 140;
#X msg 332 478 150 100 80 120 60 150 100 70 100, f 18;
#X obj 106 292 sel 1;
#X text 256 173 Our sequene has 9 elements. The [metro] object feeds a counter that goes through a modulus operation \, so it goes back to zero when reaching '9' and keeps looping., f 41;
#X text 188 253 Play/Stop (stop resets counter to '0');
#X text 319 286 The horizontal radio is just to better visualize the sequence. We use the 'get' message to query for the list element and they are used as frequency values in Hz., f 35;
#X text 355 383 Change the sequence with list messages., f 24;
#X obj 249 554 adsr~ 50 500 0 0;
#X text 378 541 A simple attack/decay envelope, f 12;
#X text 65 535 square wave oscillator, f 11;
#X floatatom 704 348 5 0 0 0 - - - 0;
#X obj 704 212 tgl 25 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 704 267 tempo 160;
#X obj 645 250 sel 0;
#X msg 645 274 reset;
#X text 605 106 You can simplify this patch by using the [count] object from ELSE \, and while we're at it \, we can also use [tempo] as an alternative., f 36;
#X obj 704 411 list store 150 100 80 120 60 150 100 70 100, f 21;
#X msg 704 378 get \$1;
#X obj 686 536 *~;
#X obj 686 567 out~;
#X obj 704 317 count 8;
#X text 764 317 counts from 0 to 8;
#X obj 704 474 b;
#X obj 249 526 b;
#X obj 634 489 bl.saw~;
#X obj 704 501 adsr~ 10 750 0 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 4 0 43 0;
#X connect 5 0 4 0;
#X connect 6 0 8 1;
#X connect 7 0 5 0;
#X connect 8 0 17 0;
#X connect 10 0 11 0;
#X connect 10 0 22 0;
#X connect 11 0 8 0;
#X connect 12 0 11 0;
#X connect 13 0 12 0;
#X connect 17 0 6 0;
#X connect 17 0 18 0;
#X connect 18 0 7 0;
#X connect 20 0 4 1;
#X connect 21 0 4 1;
#X connect 22 1 8 1;
#X connect 27 0 1 1;
#X connect 30 0 37 0;
#X connect 31 0 32 0;
#X connect 31 0 33 0;
#X connect 32 0 40 0;
#X connect 33 0 34 0;
#X connect 34 0 40 0;
#X connect 36 0 42 0;
#X connect 36 0 44 0;
#X connect 37 0 36 0;
#X connect 38 0 39 0;
#X connect 40 0 30 0;
#X connect 42 0 45 0;
#X connect 43 0 27 0;
#X connect 44 0 38 0;
#X connect 45 0 38 1;
