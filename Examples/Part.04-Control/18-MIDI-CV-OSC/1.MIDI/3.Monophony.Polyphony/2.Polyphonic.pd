#N canvas 247 37 869 661 12;
#X declare -path else;
#X obj 120 235 keyboard 17 80 2 4 0 0 empty empty;
#X obj 120 153 bng 21 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 56 164 notein;
#X obj 56 195 pack;
#X obj 746 606 poly;
#N canvas 470 55 457 368 random_chords 0;
#X obj 174 309 outlet;
#X obj 62 32 inlet;
#X obj 146 242 makenote;
#X obj 218 139 expr $f1 + random(2 \, 5);
#X obj 218 174 expr $f1 + random(2 \, 5);
#X obj 218 208 expr $f1 + random(2 \, 5);
#X obj 62 66 expr random(60 \, 72) \; random(90 \, 127) \; random(500 \, 1000);
#X obj 174 272 pack;
#X connect 1 0 6 0;
#X connect 2 0 7 0;
#X connect 2 1 7 1;
#X connect 3 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 4 0 2 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 6 0 3 0;
#X connect 6 1 2 1;
#X connect 6 2 2 2;
#X connect 7 0 0 0;
#X restore 120 199 pd random_chords;
#X text 148 154 <= generate random chords if you don't have a controller, f 29;
#X text 723 582 see also:;
#X obj 120 450 plate.rev~ 50 0.6 0.25 0.8 0.8, f 16;
#X obj 79 25 declare -path else;
#X obj 127 496 out~;
#N canvas 308 211 474 338 voice1 0;
#X obj 114 218 *~;
#X obj 56 29 inlet;
#X floatatom 132 97 5 0 0 0 - - - 0;
#X floatatom 56 95 5 0 0 0 - - - 0;
#X obj 132 150 adsr~ 100 50 0.5 250;
#X obj 269 188 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 269 222 switch~;
#X obj 56 135 bl.tri~ -midi, f 7;
#X obj 56 60 unpack f f;
#X text 300 190 turn window on/off;
#X obj 114 274 throw~ \$0-voice;
#X connect 0 0 10 0;
#X connect 1 0 8 0;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 0 1;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 7 0 0 0;
#X connect 8 0 3 0;
#X connect 8 1 2 0;
#X restore 410 524 pd voice1;
#X obj 609 475 out~;
#X obj 609 426 catch~ \$0-voice;
#X obj 410 411 voices -split 4 1;
#X obj 120 371 voices 4;
#X text 41 63 The [voices] object \, from ELSE \, manages polyphony. The first argument is the number of voices it handles. Here we have a 4 voice polyphonic example., f 44;
#X text 431 301 [voices] also has a split mode which routes the outputs the note messages to different outlets. Check the help file for more details., f 56;
#X text 94 580 The second argument of [voices] is a "voice stealing" flag \, which replaces the last pressed note if you press more notes than it can handle. This object was inspired by Pd's native [poly] object \, but [voices] brings more functionalities and it's more convenient., f 85;
#X text 431 36 The native [clone] object loads an abstraction multiple times \, which is quite useful for polyphony. When [clone] receives list messages \, the first number element is the number of the abstraction \, so it routes the rest of the message to that instance. The [voices] object has a list output by default where the first number is the voice number. The second and third are pitch and velocity \, so you can just connect it directly to [clone]., f 56;
#X text 431 163 The first number argument of [clone] is the abstraction (patch file) name to load. The second is the number of copies of the abstraction. Other arguments are sent to the abstraction itself (not used here)., f 56;
#N canvas 308 211 474 338 voice2 0;
#X obj 114 218 *~;
#X obj 56 29 inlet;
#X floatatom 132 97 5 0 0 0 - - - 0;
#X floatatom 56 95 5 0 0 0 - - - 0;
#X obj 132 150 adsr~ 100 50 0.5 250;
#X obj 269 188 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 269 222 switch~;
#X obj 56 135 bl.tri~ -midi, f 7;
#X obj 56 60 unpack f f;
#X text 300 190 turn window on/off;
#X obj 114 274 throw~ \$0-voice;
#X connect 0 0 10 0;
#X connect 1 0 8 0;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 0 1;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 7 0 0 0;
#X connect 8 0 3 0;
#X connect 8 1 2 0;
#X restore 439 497 pd voice2;
#N canvas 308 211 474 338 voice3 0;
#X obj 114 218 *~;
#X obj 56 29 inlet;
#X floatatom 132 97 5 0 0 0 - - - 0;
#X floatatom 56 95 5 0 0 0 - - - 0;
#X obj 132 150 adsr~ 100 50 0.5 250;
#X obj 269 188 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 269 222 switch~;
#X obj 56 135 bl.tri~ -midi, f 7;
#X obj 56 60 unpack f f;
#X text 300 190 turn window on/off;
#X obj 114 274 throw~ \$0-voice;
#X connect 0 0 10 0;
#X connect 1 0 8 0;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 0 1;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 7 0 0 0;
#X connect 8 0 3 0;
#X connect 8 1 2 0;
#X restore 468 468 pd voice3;
#N canvas 308 211 474 338 voice4 0;
#X obj 114 218 *~;
#X obj 56 29 inlet;
#X floatatom 132 97 5 0 0 0 - - - 0;
#X floatatom 56 95 5 0 0 0 - - - 0;
#X obj 132 150 adsr~ 100 50 0.5 250;
#X obj 269 188 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 269 222 switch~;
#X obj 56 135 bl.tri~ -midi, f 7;
#X obj 56 60 unpack f f;
#X text 300 190 turn window on/off;
#X obj 114 274 throw~ \$0-voice;
#X connect 0 0 10 0;
#X connect 1 0 8 0;
#X connect 2 0 4 0;
#X connect 3 0 7 0;
#X connect 4 0 0 1;
#X connect 4 1 5 0;
#X connect 5 0 6 0;
#X connect 7 0 0 0;
#X connect 8 0 3 0;
#X connect 8 1 2 0;
#X restore 497 440 pd voice4;
#X obj 120 418 clone voice-abs 4;
#X text 247 418 <-- click;
#X text 431 231 Click on the [clone] object to open the abstraction. Check its help file \, and also check the help file of [voices]. The loaded abstraction (voices-abs.pd) is available in the same folder of these examples., f 56;
#X connect 0 0 14 0;
#X connect 0 0 15 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 3 0 0 0;
#X connect 5 0 0 0;
#X connect 8 0 10 0;
#X connect 8 1 10 1;
#X connect 13 0 12 0;
#X connect 14 0 11 0;
#X connect 14 1 21 0;
#X connect 14 2 22 0;
#X connect 14 3 23 0;
#X connect 15 0 24 0;
#X connect 24 0 8 0;
