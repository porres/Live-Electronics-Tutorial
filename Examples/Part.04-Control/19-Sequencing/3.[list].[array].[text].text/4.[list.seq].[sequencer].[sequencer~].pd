#N canvas 294 69 926 633 12;
#X declare -path else;
#X obj 536 469 *~;
#X obj 480 422 bl.saw~;
#X obj 536 503 out~;
#X obj 686 48 declare -path else;
#X obj 567 353 sequencer~ 150 100 80 120 60 150 100 70 100;
#X obj 554 308 tempo~ -on 120 100;
#X obj 480 391 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 121 263 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 101 192 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 166 339 *~;
#X obj 121 303 bl.saw~;
#X obj 184 291 b;
#X obj 166 365 out~;
#X msg 168 209 set 50 170 90 140;
#X text 298 209 <= set a new sequence;
#X text 211 162 <= irregular tempo;
#X obj 104 502 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 101 161 tempo 120 100;
#X obj 101 126 tgl 19 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 121 235 sequencer 150 100 80 120 60 150 100 70 100;
#X text 127 126 <= turn on;
#X obj 104 449 list.seq -loop 150 100 80 120 60 150 100 70 100, f 24;
#X text 31 24 The [list.seq] and [sequencer] abstractions from ELSE are based on [text] \, but [sequencer] has much some very nice features and has a special syntax \, like "-" being treated as a pause or used to join different elements to be sent at once (like chords). Check the help files for more information!, f 64;
#X text 43 543 The [list.seq] is much simpler and \, by default \, does not loop \, so it's better suited if you want to sweep a list sequence. Here it has the loop mode enabled.;
#X text 531 99 ELSE also provides the signal rate versions [tempo~] and [sequencer~]., f 45;
#X text 531 136 The [sequencer~] object is not an abstraction though \, but a compiled object. For obvious reasons it can only take floats., f 45;
#X text 531 187 It is triggered by impulses \, which is given by the [tempo~]. This is a simple and nice if you want a sequencer that runs at audio rate precision \, but we'll show next how to do that in a patch with an array., f 45;
#X obj 554 422 asr~ 50 2000;
#X obj 184 314 asr~ 50 2000;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 5 0 27 0;
#X connect 6 0 1 0;
#X connect 7 0 10 0;
#X connect 7 0 11 0;
#X connect 8 0 19 0;
#X connect 8 0 21 0;
#X connect 9 0 12 0;
#X connect 10 0 9 0;
#X connect 11 0 28 0;
#X connect 13 0 19 0;
#X connect 17 0 8 0;
#X connect 18 0 17 0;
#X connect 19 0 7 0;
#X connect 21 0 16 0;
#X connect 27 0 0 1;
#X connect 28 0 9 1;
