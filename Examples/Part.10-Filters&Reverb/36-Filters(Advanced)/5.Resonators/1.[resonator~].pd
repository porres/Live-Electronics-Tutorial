#N canvas 451 67 804 629 12;
#X declare -path else;
#X obj 640 283 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#N canvas 864 173 371 586 analyze 0;
#X floatatom 100 104 0 0 0 0 - - - 0;
#X obj 137 260 - 60;
#X obj 113 162 >;
#X obj 113 137 t f f f;
#X obj 137 216 f;
#X obj 113 183 sel 1;
#X floatatom 137 237 5 0 0 0 - - - 0;
#X obj 99 354 sel 1;
#X obj 152 346 b;
#X obj 100 328 change;
#X floatatom 152 441 0 0 0 0 - - - 0;
#X obj 152 392 realtime;
#X obj 100 35 inlet~;
#X obj 152 474 outlet;
#X obj 100 81 env~ 128;
#X obj 100 305 <;
#X connect 0 0 3 0;
#X connect 0 0 15 0;
#X connect 1 0 8 0;
#X connect 1 0 15 1;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 3 1 2 0;
#X connect 3 2 4 1;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 1 0;
#X connect 7 0 11 1;
#X connect 8 0 11 0;
#X connect 9 0 7 0;
#X connect 10 0 13 0;
#X connect 11 0 10 0;
#X connect 12 0 14 0;
#X connect 14 0 0 0;
#X connect 15 0 9 0;
#X restore 604 429 pd analyze;
#X obj 604 461 display 7;
#X obj 226 298 / 1000;
#X obj 226 343 expr log(1000) / ($f1 * pi);
#X obj 226 372 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 288 371 bandwidth in hertz;
#X obj 208 401 /;
#X obj 145 316 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 208 427 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 267 425 Q;
#X obj 194 241 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 94 316 center;
#X text 83 336 frequency;
#X obj 190 454 /;
#X obj 190 480 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 176 375 t f f;
#X text 251 477 bandwidth in hertz;
#X obj 190 508 expr log(1000) / ($f1 * pi);
#X obj 190 551 * 1000;
#X obj 190 576 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 194 217 2000;
#X obj 194 189 bng 21 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 334 441 v pi;
#X obj 194 264 t b f;
#X obj 113 255 initmess set 1000, f 8;
#X text 252 240 t60 (decay time in ms);
#X text 248 575 t60 (decay time in ms);
#X text 198 529 <= seconds;
#X obj 622 39 declare -path else;
#X obj 572 511 out~;
#X text 237 319 <-- seconds;
#X text 34 27 A resonator or reverberator filter is a type of resonant filter that has a decay time for an impulse excitation. For instance \, the [resonator~] object from ELSE \, which takes a resonance value as t60., f 61;
#X obj 572 383 resonator~ 1000 3000;
#X obj 334 415 pi pi;
#X text 34 91 The resonance is what specifies a decay time (a.k.a "damping time" or "ring time"). The "t60" is a measure of the decay time as the time it takes to drop 60dB after excited. You can convert bandwidth to t60 and back with the same formula (see below). We also convert bandwidth to Q and back by the way., f 61;
#X text 514 83 Let's test this. The [pd analyze] subpatch below analyzes the output of the filter and sends a value when it falls under 60 dB of the attack. The analysis isn't perfect \, but it gets pretty close indeed to the default settings. As already mentioned way back \, this filter is bandpass by default and also has lowpass and highpass modes. Try it and check its help file., f 37;
#X msg 572 288 lop;
#X msg 582 313 bp;
#X msg 592 340 hip;
#X text 472 318 change modes;
#X text 667 278 excite the resonator, f 10;
#X obj 640 324 float2imp~ 1;
#X connect 0 0 42 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 7 1;
#X connect 7 0 9 0;
#X connect 8 0 16 0;
#X connect 9 0 14 1;
#X connect 11 0 24 0;
#X connect 14 0 15 0;
#X connect 15 0 18 0;
#X connect 16 0 14 0;
#X connect 16 1 7 0;
#X connect 18 0 19 0;
#X connect 19 0 20 0;
#X connect 21 0 11 0;
#X connect 22 0 21 0;
#X connect 24 0 8 0;
#X connect 24 1 3 0;
#X connect 25 0 8 0;
#X connect 33 0 1 0;
#X connect 33 0 30 0;
#X connect 34 0 23 0;
#X connect 37 0 33 0;
#X connect 38 0 33 0;
#X connect 39 0 33 0;
#X connect 42 0 33 1;
