#N canvas 519 52 507 549 12;
#X declare -path else;
#X text 339 253 cents;
#X obj 279 254 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-cents empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 282 228 hsl 128 15 -2400 2400 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 217 254 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-speed empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 217 230 speed;
#X obj 156 338 out~;
#X text 292 292 <= click;
#X text 44 56 Again we adapt a previously presented patch in the granulation series. Now is time to check out the Pitch Shifter and Time Stretch on a ring buffer with the phase accumulation. Nothing should be new \, just the same kind of adaptation., f 62;
#X obj 292 492 pvoc.live~ 6000;
#X obj 334 21 declare -path else;
#X obj 155 153 play.file~ bubul.wav 1 1;
#X text 99 443 The [pvoc.live~] \, from the ELSE library \, is based on this patch. Check its help file., f 43;
#N canvas 586 112 795 699 pvoc-live 0;
#X obj 352 338 +~;
#X obj 352 251 pack float float float;
#X obj 535 45 inlet;
#X obj 487 668 outlet~;
#X msg 352 280 \$1 \, \$2 \$3;
#X obj 535 161 v ratio_\$0;
#X obj 352 308 vline~;
#X floatatom 535 87 0 0 0 0 - - - 0;
#X obj 66 130 bang~;
#X obj 110 157 +;
#X obj 66 169 f;
#X floatatom 129 90 5 0 0 0 - - - 0;
#X text 175 89 speed (%);
#X obj 129 42 inlet;
#X text 496 87 cents;
#X obj 436 286 expr~ (window_ms_\$0 * ratio_\$0) / overlap_\$0;
#X obj 436 309 expr~ $v1 / overlap_\$0;
#X obj 503 200 r \$0-window_ms;
#X obj 66 205 expr $f1 / overlap_\$0 \; ($f1 + ((1 - ratio_\$0) * window_ms_\$0)) / overlap_\$0;
#X obj 503 226 expr $f1 / overlap_\$0;
#X obj 161 159 r \$0-buff_ms;
#X obj 129 121 expr ((1 - $f1/100) * window_ms_\$0) / overlap_\$0;
#X obj 556 341 r \$0-buff_ms;
#X obj 110 181 wrap2;
#X obj 352 366 wrap2~;
#X obj 517 377 wrap2~;
#X obj 535 129 cents2ratio;
#X obj 487 576 rifft~;
#X obj 487 635 expr~ $v1 * 2 / (window_\$0 * 3);
#X obj 446 503 rfft~;
#X obj 518 503 rfft~;
#X obj 446 478 hann~;
#X obj 518 479 hann~;
#X obj 487 604 hann~;
#X text 561 536 Same old...;
#N canvas 377 157 654 496 Phase.Accum 0;
#X obj 205 427 outlet~;
#X obj 426 424 outlet~;
#X obj 205 322 expr~ ($v1 * $v3) - ($v2 * $v4) \; ($v2 * $v3) + ($v1 * $v4);
#X obj 243 34 inlet~;
#X obj 296 34 inlet~;
#X obj 375 34 inlet~;
#X obj 426 34 inlet~;
#X obj 75 123 expr~ ($v1 * $v3) + ($v2 * $v4) \; ($v2 * $v3) - ($v1 * $v4);
#N canvas 228 78 542 340 phase_lock 0;
#X obj 385 133 lrshift~ 1;
#X obj 300 133 lrshift~ -1;
#X obj 285 225 +~;
#X obj 285 255 outlet~;
#X obj 283 47 inlet~;
#X obj 300 189 +~;
#X obj 157 137 lrshift~ 1;
#X obj 72 137 lrshift~ -1;
#X obj 57 229 +~;
#X obj 57 259 outlet~;
#X obj 55 51 inlet~;
#X obj 72 193 +~;
#X connect 0 0 5 1;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 4 0 0 0;
#X connect 4 0 1 0;
#X connect 4 0 2 0;
#X connect 5 0 2 1;
#X connect 6 0 11 1;
#X connect 7 0 11 0;
#X connect 8 0 9 0;
#X connect 10 0 6 0;
#X connect 10 0 7 0;
#X connect 10 0 8 0;
#X connect 11 0 8 1;
#X restore 138 219 pd phase_lock;
#X obj 448 390 tabsend~ \$0-re;
#X obj 458 367 tabsend~ \$0-im;
#X obj 42 52 tabreceive~ \$0-re;
#X obj 99 77 tabreceive~ \$0-im;
#N canvas 362 104 559 245 norm 0;
#X obj 352 180 outlet~;
#X obj 57 187 outlet~;
#X obj 317 31 inlet~;
#X obj 68 29 inlet~;
#X obj 57 127 expr~ $v1 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \; $v2 / sqrt(pow ($v1 \, 2) + pow($v2 \, 2)) \;;
#X obj 68 71 expr~ if($v1 == 0 && $v2 == 0 \, 1 \, $v1) \; $v2;
#X connect 2 0 5 1;
#X connect 3 0 5 0;
#X connect 4 0 1 0;
#X connect 4 1 0 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X restore 180 265 pd norm;
#X obj 467 204 table \$0-re 1024;
#X obj 467 223 table \$0-im 1024;
#X connect 2 0 0 0;
#X connect 2 0 9 0;
#X connect 2 1 1 0;
#X connect 2 1 10 0;
#X connect 3 0 7 2;
#X connect 4 0 7 3;
#X connect 5 0 2 2;
#X connect 6 0 2 3;
#X connect 7 0 8 0;
#X connect 7 1 8 1;
#X connect 8 0 13 0;
#X connect 8 1 13 1;
#X connect 11 0 7 0;
#X connect 12 0 7 1;
#X connect 13 0 2 0;
#X connect 13 1 2 1;
#X restore 455 538 pd Phase.Accum;
#X text 405 476 back;
#X text 563 479 front;
#N canvas 69 24 596 431 init 0;
#X obj 154 214 v window_ms_\$0;
#X obj 112 107 r \$0-window;
#X obj 176 135 v window_\$0;
#X obj 102 295 s \$0-cents;
#X msg 134 241 set \$1 4;
#X obj 161 190 s \$0-window_ms;
#X obj 333 216 v overlap_\$0;
#X msg 333 190 4;
#X obj 154 166 samps2ms;
#X obj 333 118 initmess bang \; \$0-window 2048 \; \$0-cents -100 \; \$0-speed 90;
#X obj 286 277 loadbang;
#X obj 286 326 s \$0-buff_ms;
#X text 326 298 <= buffer size;
#X obj 112 133 t b f f;
#X obj 134 270 s \$0-block;
#X msg 286 300 10000;
#X connect 1 0 13 0;
#X connect 4 0 14 0;
#X connect 7 0 6 0;
#X connect 8 0 0 0;
#X connect 8 0 5 0;
#X connect 9 0 7 0;
#X connect 10 0 15 0;
#X connect 13 0 3 0;
#X connect 13 1 4 0;
#X connect 13 1 8 0;
#X connect 13 2 2 0;
#X connect 15 0 11 0;
#X restore 202 324 pd init;
#X obj 201 373 r \$0-block;
#X obj 201 398 block~;
#X obj 352 406 del~ out \$0-buffer;
#X obj 517 404 del~ out \$0-buffer;
#X obj 48 45 inlet~;
#X connect 0 0 24 0;
#X connect 1 0 4 0;
#X connect 2 0 7 0;
#X connect 4 0 6 0;
#X connect 6 0 0 0;
#X connect 6 0 25 0;
#X connect 7 0 26 0;
#X connect 8 0 10 0;
#X connect 9 0 23 0;
#X connect 10 0 9 0;
#X connect 10 0 18 0;
#X connect 11 0 21 0;
#X connect 13 0 11 0;
#X connect 15 0 16 0;
#X connect 16 0 0 1;
#X connect 17 0 19 0;
#X connect 18 0 1 0;
#X connect 18 1 1 1;
#X connect 19 0 1 2;
#X connect 20 0 23 2;
#X connect 21 0 9 1;
#X connect 22 0 24 2;
#X connect 22 0 25 2;
#X connect 23 0 10 1;
#X connect 24 0 41 0;
#X connect 25 0 42 0;
#X connect 26 0 5 0;
#X connect 27 0 33 0;
#X connect 28 0 3 0;
#X connect 29 0 35 0;
#X connect 29 1 35 1;
#X connect 30 0 35 2;
#X connect 30 1 35 3;
#X connect 31 0 29 0;
#X connect 32 0 30 0;
#X connect 33 0 28 0;
#X connect 35 0 27 0;
#X connect 35 1 27 1;
#X connect 39 0 40 0;
#X connect 41 0 31 0;
#X connect 42 0 32 0;
#X restore 156 291 pd pvoc-live;
#X f 18;
#X obj 155 181 del~ in \$0-buffer 10000;
#X connect 1 0 12 2;
#X connect 2 0 1 0;
#X connect 3 0 12 1;
#X connect 10 0 13 0;
#X connect 12 0 5 0;
#X connect 13 0 12 0;
