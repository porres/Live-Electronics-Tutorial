#N canvas 370 38 752 852 12;
#X declare -path else;
#X obj 112 519 vline~;
#X obj 102 450 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 209 458 random 100;
#X obj 209 514 sig~;
#X floatatom 209 486 7 0 0 0 - - - 0;
#X obj 209 552 print~ SIG;
#X obj 102 550 print~ VLINE;
#X obj 278 152 sig~;
#X floatatom 278 127 5 0 0 0 - - - 0;
#X obj 209 432 metro 1 1 samps;
#X text 31 221 But then we have the [vline~] object \, which offers a more accurate conversion. It is mostly a line/envelope generator as we'll see \, but it can also be used for this type of conversion., f 55;
#X text 31 284 Below \, we have [metro] sending bangs at each sample. We use this to generate random values from 0 to 99 with the native [random] object., f 55;
#X obj 94 127 setdsp~;
#X text 26 27 The native [sig~] object converts control data to audio signal. But \, as we've seen \, Pd usually has an inherent control rate that prevents more than one control value affecting an audio block \, so it can only convert one value per block., f 55;
#X text 31 332 Click on the bang and see how [vline~] is capable of generating a block of audio with one random value per sample \, but [sig~] can only convert the last received value., f 55;
#X obj 549 34 declare -path else;
#X obj 209 406 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X text 35 450 click =>;
#X obj 278 180 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X floatatom 561 242 5 0 0 0 - - - 0;
#X obj 561 325 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X msg 561 270 \$1 500;
#X obj 561 297 line~;
#X text 458 84 As a line generator \, [vline~] can also convert floats to signals with a smoothening ramp. Also \, a simpler version of this object [line~] can do the same. You can set the ramp time as the 2nd item in a list input for both cases., f 34;
#X floatatom 510 502 5 0 0 0 - - - 0;
#X obj 510 555 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 510 527 f2s~ 500;
#X text 470 390 The [float2sig~] object is an abstraction based on [line~] and takes a ramp time as an argument. It can be abbreviatted as [f2s~], f 33;
#X obj 563 504 nbx 5 14 0 1000 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 622 503 ramp time;
#X obj 255 693 bng 21 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X obj 255 729 bang2imp~;
#X text 466 707 <= start metronome;
#X obj 443 735 metro 1 8 samps;
#X text 232 404 <-- start metronome;
#X text 493 217 click -->;
#X text 441 476 click -->;
#X text 209 104 click -->;
#X obj 443 709 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 510 476 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 561 216 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 278 102 tgl 19 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 255 777 out~;
#X obj 194 784 print~;
#X obj 443 769 bang2imp~;
#X obj 443 806 print~;
#X obj 386 728 bng 21 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X obj 443 680 loadbang;
#X text 141 601 The [bang2imp~] object from ELSE converts control rate bangs to impulses (a signal where a single sample is non zero while the ones next to it are zeros). Since it is an abstraction based on [vline~] it does this with sample accuracy and can convert more than one bang within an audio block., f 73;
#X connect 0 0 6 0;
#X connect 1 0 5 0;
#X connect 1 0 6 0;
#X connect 2 0 4 0;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X connect 4 0 3 0;
#X connect 7 0 18 0;
#X connect 8 0 7 0;
#X connect 9 0 2 0;
#X connect 16 0 9 0;
#X connect 19 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 20 0;
#X connect 24 0 26 0;
#X connect 26 0 25 0;
#X connect 28 0 26 1;
#X connect 30 0 31 0;
#X connect 30 0 43 0;
#X connect 31 0 42 0;
#X connect 31 0 43 0;
#X connect 33 0 44 0;
#X connect 38 0 33 0;
#X connect 39 0 24 0;
#X connect 40 0 19 0;
#X connect 41 0 8 0;
#X connect 44 0 45 0;
#X connect 46 0 45 0;
#X connect 47 0 38 0;
