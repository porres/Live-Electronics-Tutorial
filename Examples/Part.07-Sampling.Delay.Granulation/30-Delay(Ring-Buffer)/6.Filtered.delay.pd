#N canvas 360 59 900 443 12;
#X declare -path else;
#X obj 43 98 declare -path else;
#X obj 749 392 filterdelay~;
#X floatatom 375 132 8 0 100 0 - - - 0;
#X floatatom 296 132 8 20 20000 0 - - - 0;
#X obj 217 196 hip~ 5;
#X obj 217 273 *~ 0.7;
#X obj 199 307 +~;
#X msg 226 342 clear;
#X text 272 230 soft clip;
#X text 269 197 DC filter;
#X floatatom 310 341 7 -200 200 0 - - - 0;
#X obj 310 288 else/knob 41 -2 2 0 0 empty empty #dfdfdf #afafaf black 1 0 0 0 1 320 0;
#X text 302 265 feedback;
#X floatatom 217 84 7 0 0 0 - - - 0;
#X obj 217 31 else/knob 41 15 5000 4 15 empty empty #dfdfdf #afafaf black 1 0 0 0 1 320 0;
#X text 294 60 cutoff;
#X text 363 60 resonance;
#X floatatom 151 232 5 0 100 0 - - - 0;
#X obj 151 180 else/knob 41 0 1 0 0.5 empty empty #dfdfdf #afafaf black 1 0 0 0 1 320 0;
#X obj 217 162 lowpass~ 1000 1.5, f 23;
#X obj 217 230 drive~;
#X obj 42 352 out~;
#X obj 42 317 xfade~, f 16;
#X obj 42 210 player~ bubul.wav 1 1, f 9;
#X obj 217 111 del~ out \$0-fdel2, f 9;
#X obj 199 380 del~ in \$0-fdel2 5000;
#X text 127 44 time in ms;
#X text 55 184 Input;
#X text 470 23 Here's a patch that is the basis of a high level delay object in the ELSE library \, called [filterdelay~]. As the name implies \, this is a delay unit with a built in filter., f 55;
#X obj 296 83 else/knob 41 20 10000 4 20 empty empty #dfdfdf #afafaf black 2 0 0 0 1 320 0;
#X obj 375 83 else/knob 41 0.7 10 4 0.7 empty empty #dfdfdf #afafaf black 2 0 0 0 1 320 0;
#X text 144 158 dry/wet;
#X text 470 87 The [xfade~] object controls a dry and wet parameter by crossfading between the original input and the delayed and filtered signal. The filter is a resonant lowpass filter ([lowpass~]) but we also have a DC filter and a soft clip stage because the feedback parameter has no constrains \, which means you can have a big feedback coefficient value that would normally blow things up so they are contained by the DC filter and soft clipper. Note that negative feedback values are also allowed., f 55;
#X text 470 223 Note that the filtered signal goes back into the delay line. This means that we have a recursive filtering at each feedback iteration. Hence \, a higher resonance value will increasily reinforce a given frequency. This is a bit like having a feedback parameter higher than 1 or lower than -1 \, so the DC filtering and soft clipping come in hand here as well. When things get too crazy you can clear the delay line., f 55;
#X text 470 343 See the help file of [filterdelay~] \, which is based on this patch and a compiled external. It has an extra "freeze" feature \, check it out., f 55;
#X connect 2 0 19 2;
#X connect 3 0 19 1;
#X connect 4 0 20 0;
#X connect 5 0 6 1;
#X connect 6 0 25 0;
#X connect 7 0 25 0;
#X connect 10 0 5 1;
#X connect 11 0 10 0;
#X connect 13 0 24 0;
#X connect 14 0 13 0;
#X connect 17 0 22 2;
#X connect 18 0 17 0;
#X connect 19 0 4 0;
#X connect 20 0 5 0;
#X connect 20 0 22 1;
#X connect 22 0 21 0;
#X connect 23 0 6 0;
#X connect 23 0 22 0;
#X connect 24 0 19 0;
#X connect 29 0 3 0;
#X connect 30 0 2 0;
