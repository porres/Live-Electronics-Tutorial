#N canvas 369 57 868 612 12;
#X declare -path else;
#X obj 683 15 declare -path else;
#X obj 303 140 setdsp~;
#X obj 94 131 sig~ 1;
#X obj 168 131 sig~ 2;
#X obj 175 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 94 236 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 530 50 osc~ 440;
#X obj 604 50 osc~ 880;
#X obj 187 411 clone;
#X obj 475 446 nchs~;
#X obj 94 165 snake~ in 2;
#X obj 94 199 snake~ out 2;
#X obj 530 84 snake~ in 2;
#X obj 530 125 out.mc~;
#X text 33 21 Pd also has support for connections with multichannel signals. That is a single connection cable transmiting more than one channel of audio. Use the [snake~] object to combine single channels into a multichannel signal (as [snake~ in]). conversely \, use [snake~ out] to extract the channels separately., f 55;
#X text 37 310 As of Pd 0.54 \, many built in objects have support for multi channel signals. The [inlet~] object deals with multichannel inputs \, so this means you can have abstractions that deal with multichannel signals and send multichannel signals to a [pd~] object as well. The [clone] object also handles multichannels Check its help file., f 53;
#X obj 475 473 sum~;
#X obj 475 501 merge~;
#X obj 475 529 pick~;
#X obj 475 556 get~;
#X text 537 444 get the number of channels;
#X text 537 472 sum all channels, f 20;
#X text 537 500 merge signals with any channel number;
#X text 537 528 pick a single channel;
#X text 537 555 get one or more channels;
#X text 37 269 * The [numbox~] object above is able to monitor signal inputs., f 53;
#X text 252 235 <-- [numbox~] *;
#X text 462 367 Some other objects from ELSE that provide tools to deal with multi channel signals:, f 50;
#X obj 475 418 sigs~;
#X text 537 416 generate multichannel signal from list;
#X obj 607 254 osc.mc~ 440 880;
#X obj 607 291 out.mc~;
#X text 42 458 The [adc~] and [dac~] objects have support as described before. Next \, we have the [out.mc~] abstraction that is also based on [dac~] and takes a multichannel inputs and distributes the channels., f 48;
#X text 639 136 <- mc output;
#X text 461 203 The [osc.mc~] object is a bank of oscillators that generates a multichannel signal output and is the same as above., f 50;
#X connect 2 0 10 0;
#X connect 3 0 10 1;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 4 0;
#X connect 12 0 13 0;
#X connect 30 0 31 0;
