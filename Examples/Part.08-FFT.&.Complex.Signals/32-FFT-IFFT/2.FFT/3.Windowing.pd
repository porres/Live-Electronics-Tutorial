#N canvas 639 23 565 698 12;
#X declare -path else;
#X text 254 297 1;
#X text 253 412 0;
#X text 270 428 0;
#X obj 73 397 osc~;
#X obj 50 466 tabwrite~ \$0-hann;
#X msg 98 372 0.5;
#X obj 269 306 cnv 15 198 118 empty empty empty 20 12 0 14 -228856
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-hann 2048 float 0;
#X coords 0 1 2047 0 200 120 1;
#X restore 268 305 graph;
#X text 64 58 We've seen that FFT expects periodic signals that match
its harmonic series \, but that's not what happens in practice. For
spectral processing we use STFTs and the analisys is done in a sound
grain \, with the size of the audio block., f 60;
#X text 292 428 ---- window size ----;
#X obj 161 337 block~ 2048;
#X obj 328 659 hann~;
#X obj 50 321 nbx 7 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 21.5332 256;
#X obj 50 289 blocksize~ -hz;
#X obj 50 348 t b f b;
#X text 113 398 inverted cosine;
#X obj 73 426 rescale~;
#X text 64 212 This example shows how to generate a hann frunction
with [osc~]. We need to find a frequency that matches the block size
\, which can be given by [blocksize~]., f 60;
#X text 453 429 2048;
#X text 138 426 rescale (0 to 1), f 8;
#X text 45 586 The ELSE library provides the [hann~] object \, which
is an abstraction that already appllies a hann window into its input.
It calculates the hann function in a different way. Check its help
file.;
#X obj 350 511 tabreceive~ \$0-hann;
#X obj 332 539 *~;
#X text 127 508 After generating an array \, you can access it with
the [tabreceive~] object., f 26;
#X obj 349 17 declare -path else;
#X text 64 121 When we apply an envelope in the grain \, the analysis
result has less artifcts \, and it's also forced to become periodic.
This envelope is called a "window" in the context of FFT. The hann
function is an important window type \, and we've used it already for
envelopes in granular techniques. It can be obtained from a cosine
function.;
#X connect 3 0 16 0;
#X connect 5 0 3 1;
#X connect 12 0 14 0;
#X connect 13 0 12 0;
#X connect 14 0 4 0;
#X connect 14 1 3 0;
#X connect 14 2 5 0;
#X connect 16 0 4 0;
#X connect 21 0 22 1;
