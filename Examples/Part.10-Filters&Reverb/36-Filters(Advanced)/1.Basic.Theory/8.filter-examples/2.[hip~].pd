#N canvas 74 23 931 712 12;
#X declare -path else;
#X obj 504 314 rpole~;
#X obj 537 139 hip~;
#X obj 562 105 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 455 69 noise~;
#X obj 565 78 hsl 128 15 20 20000 1 1 empty empty empty -2 -8 0 10
#dcdcdc #000000 #000000 7400 1;
#X text 123 125 y[n] = x[n] - a[n] * x[n-1];
#X obj 180 637 clip 0 1;
#X floatatom 180 543 5 0 0 0 - - - 0;
#X floatatom 180 665 5 0 0 0 - - - 0;
#X text 154 542 Hz;
#X obj 829 536 v a;
#X obj 652 225 send \$0-a;
#X obj 543 287 receive \$0-a;
#X obj 829 512 receive \$0-a;
#X obj 163 394 fexpr~ $x - $x[-1] + a * $y[-1];
#X text 95 459 y[n] = x[n] - x[n-1] + a * y[n-1];
#X obj 683 313 cnv 15 150 50 empty empty empty 5 12 0 14 #fcc4c4 #404040
0;
#X text 730 323 _____________;
#X text 684 329 H(z) =;
#X text 735 340 1 - a * z^-1;
#X text 743 317 1 - z^-1;
#X text 29 37 The [hip~] object is a 1 Pole / 1 Zero filter. It can
then be implemented with the [rpole~] object plus the [rzero~] \, which
is a one zero filter whose difference equation and [fexpr~] implementation
is:, f 47;
#X obj 73 221 rzero~;
#X text 57 433 Difference equation:;
#X obj 455 461 out~;
#X obj 504 358 out~;
#X obj 180 577 hz2rad;
#X obj 180 607 expr 1 - $f1;
#X text 28 509 The pole coefficient is now given as:;
#X obj 537 185 out~;
#X obj 652 195 clip 0 1;
#X obj 652 141 hz2rad;
#X obj 652 168 expr 1 - $f1;
#X text 443 17 Compare below the [hip~] object to other equivalent
implementations., f 34;
#N canvas 762 140 455 370 H(z) 0;
#X text 106 109 Y(z) = X(z) - X(z)z^-1 + a * Y(z)z^-1;
#X text 113 134 X(z) - X(z)z^-1 = Y(z) - a * Y(z)z^-1;
#X text 114 154 X(z) (1 - z^-1) = Y(z) - a * Y(z)z^-1;
#X text 114 176 X(z) = Y(z) - a * Y(z)z^-1 / (1 - z^-1);
#X text 87 205 H(z) = Y(z) * (1 - z^-1) / Y(z) - a * Y(z)z^-1;
#X text 173 267 _____________;
#X text 132 270 H(z) =;
#X text 179 284 1 - a * z^-1;
#X text 186 261 1 - z^-1;
#X text 33 43 From: y[n] = x[n] - x[n-1] + a * y[n-1];
#X text 35 78 We get:;
#X restore 780 364 pd H(z);
#X obj 736 25 declare -path else;
#X text 689 289 Transfer function:;
#X obj 379 595 biquad~;
#X obj 379 629 out~;
#X obj 427 561 pack f 0 1 -1 0;
#X obj 427 533 receive \$0-a;
#X obj 165 223 fexpr~ $x1 - $x2*$x1[-1];
#X text 29 165 The [rzero~] object corresponds to the [fexpr~] below:
, f 47;
#X text 135 222 =;
#X text 140 304 y[n] = x[n] - x[n-1];
#X text 24 337 Let's join it to the one pole equation (y[n] = x[n]
+ a * y[n-1]) and get a single equation for this filter:, f 38;
#X text 559 566 We can also use [biquad~]. The gain coefficient is
always 1 and note that the zero coefficient is also 1 but now it is
negative - because in [biquad~] we are summing the zero coefficients
and not subtracting it as in [rzero~]., f 47;
#X text 54 665 pole coefficient;
#X text 19 264 The 'a' zero coefficient for [hip~] is always 1 \, so
we can simplify the equation as:, f 49;
#X obj 646 367 env~ 32768;
#X floatatom 740 431 13 0 0 0 - - - 0;
#X obj 722 227 env~ 32768;
#X floatatom 739 410 14 0 0 0 - - - 0;
#X obj 590 469 env~ 32768;
#X floatatom 739 448 13 0 0 0 - - - 0;
#X obj 504 259 rzero~ 1;
#X obj 455 433 fexpr~ ($x - $x[-1]) + a*$y1[-1];
#X obj 632 515 env~ 32768;
#X floatatom 739 466 13 0 0 0 - - - 0;
#X connect 0 0 25 0;
#X connect 0 0 49 0;
#X connect 1 0 29 0;
#X connect 1 0 51 0;
#X connect 2 0 1 1;
#X connect 2 0 31 0;
#X connect 3 0 1 0;
#X connect 3 0 37 0;
#X connect 3 0 56 0;
#X connect 4 0 2 0;
#X connect 6 0 8 0;
#X connect 7 0 26 0;
#X connect 12 0 0 1;
#X connect 13 0 10 0;
#X connect 26 0 27 0;
#X connect 27 0 6 0;
#X connect 30 0 11 0;
#X connect 31 0 32 0;
#X connect 32 0 30 0;
#X connect 37 0 38 0;
#X connect 37 0 57 0;
#X connect 39 0 37 0;
#X connect 40 0 39 0;
#X connect 49 0 50 0;
#X connect 51 0 52 0;
#X connect 53 0 54 0;
#X connect 56 0 24 0;
#X connect 56 0 53 0;
#X connect 57 0 58 0;
