#N struct 1011-point float x0 float y0 float xs float ys float fg float in float gridx float gridy;
#N canvas 266 52 893 602 12;
#X declare -path else;
#X obj 40 305 osc~ 400;
#X obj 262 306 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 259 332 nbx 5 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12 #dcdcdc #000000 #000000 0 256;
#X text 332 332 Posição (0-1);
#X floatatom 576 218 5 0 0 0 - - - 0;
#X obj 579 196 hsl 128 15 -1 1 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 369 396 v pi;
#X obj 512 200 noise~;
#X obj 369 370 pi;
#X obj 512 234 pan2~;
#X obj 40 438 meter2~;
#X obj 40 348 expr~ $v1 * cos($v2 * pi/2) \; $v1 * sin($v2 * pi/2);
#X obj 326 474 setdsp~ 1;
#X text 22 53 "Panning" or just "pan" distributes a mono signal into a stereo field. The "pan" control allows you to distribute a sound source more to the right or to the left., f 57;
#X text 225 306 left;
#X text 397 305 right;
#X text 21 197 Since we have a Sine/Coine function \, we have an "Equal Power Panning". Similarly than the equal power crossfade \, at the middle point \, we have a -3 dB attenuation for both channels., f 57;
#X text 655 160 middle point, f 6;
#X obj 576 165 initmess 0;
#X text 353 280 middle point;
#X obj 259 281 initmess 0.5;
#X floatatom 744 293 5 0 0 0 - - - 0;
#X floatatom 813 292 5 0 0 0 - - - 0;
#X obj 676 255 noise~;
#X text 729 291 X;
#X text 793 292 Y;
#X obj 744 268 unpack f f;
#X obj 259 359 f2s~ 20;
#X obj 576 241 f2s~ 20;
#X obj 676 317 pan4~, f 20;
#X text 512 482 see also:;
#X obj 744 196 slider2d 64 64 -1 1 -1 1 0 210 210 210 0 0 0 1 0 1 0 0 empty empty;
#X obj 146 450 out~;
#X obj 490 299 out~;
#X text 22 104 This is rather similar to crossfading \, but instead of mixing two sound sources into an output \, we kinda do the opposite and distribute a single source into two outputs. Check the implementation below and see how the process depends on a same structure than the crossfading \, and how we also adopt the sine/cosine functions., f 57;
#X obj 674 24 declare -path else;
#X text 458 59 The [pan2~] object (from the ELSE library) is the same as the implementation below to the left \, but the pan parameter is from -1 to 1 (instead of 0 to 1). This makes it more suitable for controlling it with audio signals. Check also the [pan4~] object \, which is a 4 speakers panning object and [pan~] for a circular vesion for any 'n' number of speakers.;
#X obj 522 511 pan~, f 6;
#X obj 697 348 meter4~;
#X obj 744 168 initmess 0 0;
#X text 481 371 Check their help files and note these can also output a multichannel connection., f 26;
#X obj 522 541 pan.mc~;
#X text 592 520 A circular vesion for any 'n' number of speakers., f 29;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 2 0 27 0;
#X connect 4 0 28 0;
#X connect 5 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 9 0 33 0;
#X connect 9 1 33 1;
#X connect 11 0 10 0;
#X connect 11 0 32 0;
#X connect 11 1 10 1;
#X connect 11 1 32 1;
#X connect 18 0 5 0;
#X connect 20 0 1 0;
#X connect 21 0 29 1;
#X connect 22 0 29 2;
#X connect 23 0 29 0;
#X connect 26 0 21 0;
#X connect 26 1 22 0;
#X connect 27 0 11 1;
#X connect 28 0 9 1;
#X connect 29 0 38 0;
#X connect 29 1 38 1;
#X connect 29 2 38 2;
#X connect 29 3 38 3;
#X connect 31 0 26 0;
#X connect 39 0 31 0;
