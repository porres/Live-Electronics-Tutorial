#N canvas 325 28 959 688 12;
#X declare -path else;
#X obj 723 328 phasor~;
#X obj 723 387 tabread4~ \$0-buffer;
#X obj 643 217 nbx 5 18 -1e+37 1e+37 0 0 empty tempo empty 0 -8 0 13 #dcdcdc #000000 #000000 0 256;
#X floatatom 107 435 0 0 0 0 - - - 0;
#X floatatom 187 492 0 0 0 0 - - - 0;
#X obj 107 517 s \$0-size;
#X obj 643 243 / 100;
#X obj 723 217 nbx 5 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13 #dcdcdc #000000 #000000 0 256;
#X obj 723 277 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 794 217 Cents;
#X obj 723 246 cents2ratio;
#X obj 723 422 out~;
#X text 245 491 <= Reading frequency;
#X text 569 217 Speed (%);
#X text 784 276 Ratio;
#X obj 547 404 initmess \; tempo 100;
#X obj 723 355 *~;
#X obj 758 355 r \$0-size;
#X obj 758 299 r \$0-hz;
#X obj 187 519 s \$0-hz;
#X obj 723 299 *~;
#X obj 187 463 /;
#X text 510 136 We need to multiply the output of [phasor~] by the number of samples in the file so we can access the indexes from the array., f 57;
#X obj 350 534 cnv 15 385 140 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X text 368 538 Interpolation error:;
#X text 369 558 Interpolation can add noise artifacts. To reduce this error you can work with files with higher sample rates than Pd is running \, such as 88.2 KHz sound file when running at 44.1 Khz as in this example., f 50;
#X text 369 633 You can use a good resampling software to upsample a sound file as was done here for this example., f 50;
#X obj 166 373 unpack;
#X floatatom 205 405 6 0 0 0 - - - 0;
#X obj 180 435 swap;
#X text 46 435 size =>;
#X text 30 218 In this example we use [phasor~] to read from [tabread4~]. The [phasor~] object is used to play the sample in a loop \, and we need to find the frequency corresponding to the sound file's period. We do that by dividing the sample rate of the file (even if it's different than Pd's) by the number of samples - both information are given by [sample~] (one could use [soundfiler] instead \, in which [sample~] is based on)., f 64;
#X obj 755 28 declare -path else;
#X obj 166 343 sample~ \$0-buffer sax.wav;
#X text 510 57 We use a ratio value to set the speed \, this can also be calculated from cents or a percentage value. Then \, all you need is to multiply the ratio by the frequency in hertz. Note that negative percentage/ratio values are possible and that they play the file backwards., f 57;
#X text 30 170 You can also play files with a different sample rate than Pd is running \, because you can compensate the difference by setting a difference speed., f 64;
#X text 30 17 The [tabplayer~] object from ELSE plays a buffer at different speeds. In vanilla \, you need to read a buffer with [tabread4~] \, which performs interpolation., f 64;
#X text 30 65 Because when you set a reading speed such as 1.5x (150% faster) \, it means that the reading point will fall in between samples every other sample \, thus you need to interpolate to get a value that better corresponds to that missing step in between. We'll see the interpolation type of [tabread4~] a bit later. By the way \, [tabplayer~] offers the same interpolation type as [tabread4~]., f 64;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 385 141 1;
#X restore 351 533 graph;
#X text 254 405 <-- sample rate;
#X connect 0 0 16 0;
#X connect 1 0 11 0;
#X connect 2 0 6 0;
#X connect 3 0 5 0;
#X connect 4 0 19 0;
#X connect 6 0 8 0;
#X connect 7 0 10 0;
#X connect 8 0 20 0;
#X connect 10 0 8 0;
#X connect 16 0 1 0;
#X connect 17 0 16 1;
#X connect 18 0 20 1;
#X connect 20 0 0 0;
#X connect 21 0 4 0;
#X connect 27 0 29 0;
#X connect 27 0 3 0;
#X connect 27 1 28 0;
#X connect 28 0 29 1;
#X connect 29 0 21 0;
#X connect 29 1 21 1;
#X connect 33 0 27 0;
