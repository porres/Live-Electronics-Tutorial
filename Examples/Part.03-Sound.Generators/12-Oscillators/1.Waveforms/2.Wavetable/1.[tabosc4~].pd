#N canvas 230 40 1070 649 12;
#X declare -path else;
#X obj 592 372 s harm;
#X msg 592 344 0;
#X obj 979 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 917 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 855 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 794 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 732 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 671 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 609 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X obj 728 352 cnv 15 248 138 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
#N canvas 0 22 474 324 (subpatch) 0;
#X array \$0-wavetable 515 float 0;
#X coords 0 1 514 -1 250 140 1 0 0;
#X restore 727 351 graph;
#X obj 274 486 nbx 4 18 -1e+37 1e+37 0 1 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 339 256;
#X text 709 345 1;
#X text 705 480 -1;
#N canvas 317 87 1099 432 normalizado 0;
#X obj 479 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 425 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 371 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 318 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 264 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 123 176 unpack float float float float float float float float;
#X obj 211 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 157 204 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 104 205 nbx 4 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 135 148 <== lista normalizada;
#X obj 123 88 inlet;
#N canvas 178 61 728 505 normalizar 0;
#X obj 277 85 array define \$0-partials 8;
#X f 13;
#X obj 256 123 array set \$0-partials;
#X obj 194 158 array min \$0-partials;
#X obj 232 188 array max \$0-partials;
#X obj 217 215 max;
#X obj 194 189 abs;
#X obj 185 262 /;
#X obj 104 159 list split 1;
#X obj 116 199 list;
#X obj 72 198 t b f;
#X obj 106 318 list prepend;
#X obj 111 353 t l;
#X obj 74 353 list;
#X obj 177 43 inlet;
#X obj 74 400 outlet;
#X obj 177 122 t l b b l;
#X connect 2 0 5 0;
#X connect 3 0 4 1;
#X connect 4 0 6 1;
#X connect 5 0 4 0;
#X connect 6 0 10 0;
#X connect 7 0 9 0;
#X connect 7 1 8 1;
#X connect 7 2 12 0;
#X connect 7 2 10 1;
#X connect 8 0 7 0;
#X connect 9 0 8 0;
#X connect 9 1 6 0;
#X connect 10 0 11 0;
#X connect 10 0 12 1;
#X connect 11 0 10 1;
#X connect 12 0 14 0;
#X connect 13 0 15 0;
#X connect 15 0 7 0;
#X connect 15 1 2 0;
#X connect 15 2 3 0;
#X connect 15 3 1 0;
#X restore 123 118 pd normalizar;
#X connect 5 0 8 0;
#X connect 5 1 7 0;
#X connect 5 2 6 0;
#X connect 5 3 4 0;
#X connect 5 4 3 0;
#X connect 5 5 2 0;
#X connect 5 6 1 0;
#X connect 5 7 0 0;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X coords 0 -1 1 1 430 27 2 100 200;
#X restore 567 273 pd normalizado;
#N canvas 345 184 415 268 sequencer 0;
#X obj 33 95 mtof;
#X obj 144 175 *~;
#X obj 144 204 outlet~;
#X obj 173 88 sequencer 42 40 40 45 40 49 52 52 45 43 43 47 50 54 55 55, f 29;
#X obj 33 125 tabosc4~ \$0-wavetable, f 12;
#X obj 162 141 envgen~ 50 1 150 1 50 0;
#X obj 162 40 tempo -on 240;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 1 1;
#X connect 6 0 3 0;
#X connect 6 0 5 0;
#X restore 119 520 pd sequencer;
#X obj 566 171 cnv 1 1 1 empty empty 1st 0 0 0 14 #fcfcfc #404040 0;
#X obj 617 171 cnv 1 1 1 empty empty 2nd 0 0 0 14 #fcfcfc #404040 0;
#X obj 687 171 cnv 1 1 1 empty empty 3rd 0 0 0 14 #fcfcfc #404040 0;
#X obj 740 171 cnv 1 1 1 empty empty 4th 0 0 0 14 #fcfcfc #404040 0;
#X obj 803 171 cnv 1 1 1 empty empty 5th 0 0 0 14 #fcfcfc #404040 0;
#X obj 864 171 cnv 1 1 1 empty empty 6th 0 0 0 14 #fcfcfc #404040 0;
#X obj 928 171 cnv 1 1 1 empty empty 7th 0 0 0 14 #fcfcfc #404040 0;
#X obj 989 171 cnv 1 1 1 empty empty 8th 0 0 0 14 #fcfcfc #404040 0;
#X text 985 114 |;
#X text 985 124 |;
#X text 985 133 |;
#X text 985 142 |;
#X text 567 114 |;
#X text 567 123 |;
#X text 567 132 |;
#X text 567 141 |;
#X obj 548 212 pack2 float float float float float float float float, f 62;
#X obj 119 560 out~;
#X obj 548 185 nbx 4 18 -1e+37 1e+37 0 0 empty harm empty 0 -8 0 10 #b8c8dc #000000 #000000 0 256;
#X msg 548 538 normalize;
#X obj 548 471 list trim;
#X obj 629 537 display;
#X obj 548 503 t b a, f 12;
#X obj 274 559 out~;
#X text 22 18 In this example we use [tabosc4~] \, a native object that uses an array as a waveform. We generate a waveform with the "sinesum" message sent to an array \, which needs an array size that's a power of two (512 in this case) and a list of partials (8 of them in this example)., f 70;
#X obj 548 51 initmess 1;
#X text 624 344 Reset;
#X text 22 442 Test the resulting sound below with a frequency input or from a sequencer driving [tabosc4~]., f 70;
#X text 327 486 Hz;
#X text 600 125 (Negative values invert the polarity of a partial!);
#X text 573 103 --------------- Partial Amplitude list --------------------;
#X obj 629 584 send \$0-wavetable;
#X obj 274 519 tabosc4~ \$0-wavetable;
#X obj 864 30 declare -path else;
#X text 22 161 Note that after sending the list of partials \, we do normalize the array. A subpatch also normalizes the partials for us to visualize the normalized values of each partial., f 70;
#X text 22 82 Play with the number boxes to the right. Each box represents the amplitude of a partial from our partials list. The drawn waveform is composed as a sum of this list of 8 partials. The sinesum message generates waveforms in arrays from a list of amplitudes for each partial. The first value is the table size., f 70;
#X text 592 246 normalized;
#X obj 548 428 list prepend sinesum 512, f 12;
#X text 22 213 The [tabosc4~] object performs interpolation. The details about interpolation are presented later in this tutorial \, but know for now that interpolation means finding approximate mid point values between 2 adjacent points. The [tabosc4~] object has an interpolation method called lagrange that uses 4 points (hence the "4" in the name)., f 70;
#X text 22 291 Sinesum generates arrays with "extra points" (in this example \, 512 points plus 3) \, which also called "guard points". These extra points are copies of the outer points and needed for interpolation in [tabosc4~]. Again \, more information about this all will come later \, and none of this information about extra points is needed for the patch. Note for now this is just technical details in the background. The 'sinesum' command only generates tables whose size is a power of two plus these 3 guard points and [tabosc4~] can only read tables with such possible sizes. Hence \, the 'sinesum' command is specially designed for [tabosc4~], f 70;
#X connect 1 0 0 0;
#X connect 2 0 32 7;
#X connect 3 0 32 6;
#X connect 4 0 32 5;
#X connect 5 0 32 4;
#X connect 6 0 32 3;
#X connect 7 0 32 2;
#X connect 8 0 32 1;
#X connect 11 0 48 0;
#X connect 15 0 33 0;
#X connect 32 0 14 0;
#X connect 32 0 53 0;
#X connect 34 0 32 0;
#X connect 35 0 47 0;
#X connect 36 0 38 0;
#X connect 37 0 47 0;
#X connect 38 0 35 0;
#X connect 38 1 37 0;
#X connect 41 0 34 0;
#X connect 48 0 39 0;
#X connect 53 0 36 0;
