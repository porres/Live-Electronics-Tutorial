#N canvas 404 33 903 518 12;
#X declare -path else;
#X obj 355 458 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13 #dcdcdc #000000 #000000 0 256;
#X text 434 459 dBFS;
#X obj 50 270 meter~;
#X obj 49 433 out~;
#X obj 366 299 setdsp~ 1;
#X obj 238 270 meter~ 4096 4096;
#X obj 355 434 rint;
#X obj 238 433 out~;
#X obj 256 60 initmess -20;
#X obj 256 85 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13 #dcdcdc #000000 #000000 0 256;
#X text 317 87 dBFS;
#X obj 256 172 /~;
#X obj 238 242 *~;
#X obj 494 327 norm~ -30 -size 1024;
#X obj 494 355 meter~ 4096 4096;
#X text 445 141 It is also based on [mov.rms~] to give us a running RMS analysis. The adjustment is with a simple division between the target amplitude and the running RMS. The result is a ratio that we use to multiply the input so we can reach the target., f 61;
#X text 451 243 This patch is implemented in the [norm~] abstraction from the ELSE library. Check it below \, open its help file.;
#X text 566 390 This process can be used in conjunction to a noise gate (in an earlier stage) to avoid that a noise floor is raised to the normalized value!, f 41;
#X text 445 100 This realtime normalizer patch continuously adjusts the gain to a fixed RMS value., f 61;
#X obj 697 59 declare -path else;
#X obj 494 299 play.file~ 1 MouthBow.wav 1 1;
#X obj 50 71 play.file~ 1 kantele.wav 1 1, f 15;
#X obj 256 208 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X text 329 206 <-- ratio;
#X obj 294 173 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 294 147 mov.rms~ -lin 1024;
#X obj 256 110 db2lin;
#X connect 2 0 3 0;
#X connect 5 0 7 0;
#X connect 5 1 6 0;
#X connect 6 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 26 0;
#X connect 11 0 22 0;
#X connect 12 0 5 0;
#X connect 13 0 14 0;
#X connect 20 0 13 0;
#X connect 21 0 2 0;
#X connect 21 0 12 0;
#X connect 21 0 25 0;
#X connect 22 0 12 1;
#X connect 24 0 11 1;
#X connect 25 0 24 0;
#X connect 26 0 11 0;
