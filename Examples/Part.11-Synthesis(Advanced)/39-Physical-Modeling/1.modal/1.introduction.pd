#N canvas 380 59 978 736 12;
#X declare -path else;
#X obj 591 234 keyboard 15 60 2 3 0 0 empty empty;
#X obj 591 318 stripnote;
#X obj 591 352 mtof;
#X obj 838 343 / 127;
#X obj 805 355 *~;
#X obj 805 310 white~ -clip;
#X obj 838 365 decay~ 100;
#X obj 591 469 out~;
#X obj 718 591 plaits~, f 11;
#X text 36 507 The resonant modes are the natural vibration frequencies of an object \, which depend on the shape \, material \, and boundary conditions (how the object is fixed or free to vibrate). For instance \, regarding a circular drumhead \, the resonant frequencies follow the Bessel function solutions to the wave equation. The damping (decay) factors controls how fast each mode dies out \, which also depends on physical characteristics (material damping \, air resistance \, and how the object is struck). It is ften modeled as an exponential decay. The amplitudes dictate how much each mode contributes to the sound and may depend on where the object is struck. For example \, striking the center of a drum excites the fundamental mode more. Striking off-center excites higher modes more., f 57;
#X text 483 69 Besides mathematical solutions to wave equations (e.g. \, for plates \, strings \, membranes) \, the parameters may come from experimental measurements and you can use spectral analysis and even something like [sigmund~] to extract these parameters from a sample., f 62;
#X text 566 561 Also check [plaits~] and its modal resonator engine., f 35;
#X obj 591 381 resonbank~ -ratio 1 2 2.803 3.871 5.074 7.81 10.948 14.421 -decay 1000 205 1000 196 339 47 58 47 -amp 1 0.044 0.891 0.0891 0.794 0.1 0.281 0.079, f 31;
#X text 37 29 Modal synthesis is useful for synthesizing percussive and resonant sounds like bells \, gongs \, plates \, and strings. This physical modeling technique represents a sound as a sum of resonant 'modes' (hence the name) \, each with its own frequency \, amplitude \, and damping. It focuses on how objects vibrate in response to excitation and we can then implement it with resonant filters and an excitation signal. In ELSE we have [resonbank~] and [resonbank2~] objects that are well suited for this., f 57;
#X text 37 164 Typically the modes are implemented and modeled as a damped sinusoidal oscillator \, so you can think of [damp.osc~] (based on [resonator2~]) and [resonbank2~] \, which is kind of a bank of [damp.osc~] objects. But you can also just use [resonator~] and other filters for designing cool sounds based on this technique..., f 57;
#X text 37 257 In Modal Synthesis \, sounds are modeled based on physical resonance modes \, meaning each oscillator represents a natural vibration mode of a physical object \, with parameters like frequency \, damping \, and energy decay determined by the material and shape of the object. You can realize that modal synthesis is similar to additive synthesis \, since both represent sounds as a sum of sinusoidal components \, so the differences are subtle \, where modal synthesis is a physically informed approach to additive synthesis \, focusing on how objects resonate rather than freely designing harmonic or inharmonic components. Hence \, the parameters come from physical measurements or mathematical models of vibrating objects. This means that you can have parameters and formulas that change according to the phsyical characteristics you're trying to emulate \, such as string tension \, striking position and so on..., f 57;
#X text 483 151 Here's a simple modal synthesis patch and how to use [resonbak~] with a clipped noise burst as an excitation signal. This is basically the example of the help file \, so check it out., f 62;
#X obj 757 31 declare -path else;
#X text 559 654 In the next example we have more patches based on [resonbank2~], f 47;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 3 0;
#X connect 2 0 12 0;
#X connect 3 0 6 0;
#X connect 4 0 12 1;
#X connect 5 0 4 0;
#X connect 6 0 4 1;
#X connect 12 0 7 0;
