#N struct 1004-point float x0 float y0 float xs float ys float fg float in float gridx float gridy;
#N canvas 250 23 884 690 12;
#X declare -path else;
#X text 23 18 You may have realized that the last example about Vector Synthesis is a bit like the previous one on wavetable scanning. The difference is that you have 2 dimensions to scan/crossfade \, so we can call it '2D scanning'., f 51;
#N canvas 174 147 1086 414 2D-table 0;
#X obj 27 206 cnv 19 1022 138 empty empty empty 20 12 0 12 #e0e0e0 #404040 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-2d-wave 16384 float 0;
#X coords 0 1 16383 -1 1024 140 1 0 0;
#X restore 26 205 graph;
#X obj 638 129 soundfiler;
#X obj 638 104 initmess read -resize PLAITS03.wav \$0-2d-wave;
#X obj 219 139 plaits~;
#X text 54 33 In this example we're loading a wav file downloaded from https://waveeditonline.com/ that is used in the PLAITS module from mutable instruments. By the way \, ELSE has a port of [plaits~] as well \, which has been previously presented briefly. So we're talking about synth engine mode #5 and you can check it out too in the help file of the object., f 57;
#X floatatom 638 154 6 0 0 0 - - - 0;
#X text 22 356 row 0 -----------|;
#X text 152 356 row 1 -----------|;
#X text 282 356 row 2 -----------|;
#X text 412 356 row 3 -----------|;
#X text 542 356 row 4 -----------|;
#X text 672 356 row 5 -----------|;
#X text 802 355 row 6 -----------|;
#X text 932 356 row 7 ----------|;
#X text 494 27 The file is 16384 samples long and is considered to be split in a 8x8 grid. We first split into 8 rows of 2048 points each. You could imagine the rows stacked vertically in your mind. Then each row is split into 8 frames (or columns) of 256 points. We then have 64 frames that can be crossfaded in two dimensions., f 76;
#X text 688 155 number of points;
#X connect 2 0 6 0;
#X connect 3 0 2 0;
#X restore 717 321 pd 2D-table;
#X obj 698 33 declare -path else;
#X obj 414 140 slider2d 166 166 0 1 1 0 1 211 211 211 0 0 0 1 0 0 0 0 empty empty;
#X obj 298 463 graph~;
#X obj 298 619 out~;
#X obj 209 293 nbx 5 17 -1e+37 1e+37 0 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 256;
#X obj 209 262 initmess 220;
#X obj 414 32 initmess 0 0;
#N canvas 191 23 918 714 2D-wt-scanning 0;
#X obj 238 453 wrap~;
#X obj 148 272 +~ 1;
#X obj 30 301 +~;
#X obj 130 301 +~;
#X obj 429 307 +~ 1;
#X obj 30 370 +~;
#X obj 130 370 +~;
#X obj 315 370 +~;
#X obj 411 370 +~;
#X obj 519 351 wrap~;
#X floatatom 238 168 7 0 0 0 - - - 0;
#X obj 30 474 *~ 256;
#X obj 130 474 *~ 256;
#X obj 315 474 *~ 256;
#X obj 411 474 *~ 256;
#X obj 429 331 *~ 8;
#X obj 290 281 *~ 8;
#X obj 278 639 xfade~ -lin;
#X obj 315 574 xfade~ -lin;
#X obj 93 574 xfade~ -lin;
#X obj 238 481 *~ 2;
#X obj 238 505 -~ 1;
#X obj 519 499 *~ 2;
#X obj 519 523 -~ 1;
#X obj 429 242 trunc~;
#X obj 148 233 trunc~;
#X text 117 134 X axis (column) from 0 to 7, f 15;
#X text 426 123 Y axis (row) from 0 to 7, f 12;
#X text 325 281 <- n rows;
#X obj 519 193 f2s~ 20;
#X obj 238 193 f2s~ 20;
#X obj 278 674 outlet~;
#X obj 238 112 knob 50 0 7 0 0 empty empty #dfdfdf #7c7c7c black 1 0 0 0 1 320 0 0 0;
#X floatatom 519 168 7 0 0 0 - - - 0;
#X obj 519 112 knob 50 0 7 0 0 empty empty #dfdfdf #7c7c7c black 1 0 0 0 1 320 0 0 0;
#X text 362 330 n rows ->;
#X text 348 307 next row ->;
#X text 183 272 <- next column, f 7;
#X obj 238 54 unpack float float, f 28;
#X obj 238 19 inlet;
#X obj 46 406 trunc~;
#X obj 46 432 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 146 406 trunc~;
#X obj 146 434 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 328 406 trunc~;
#X obj 328 434 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 428 406 trunc~;
#X obj 428 434 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 519 559 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X obj 238 536 numbox~ 6 12 100 #C0C0C4 #440008 10 0 0 0;
#X text 176 575 - horizontal fade -;
#X text 366 638 - vertical fade;
#X text 49 450 frame#;
#X text 149 450 frame#;
#X text 331 450 frame#;
#X text 432 450 frame#;
#X obj 30 19 inlet;
#X obj 30 233 phasor~;
#X obj 238 81 * 7;
#X obj 519 81 * 7;
#X obj 30 503 tabreader~ -loop -index \$0-2d-wave, f 12;
#X obj 130 503 tabreader~ -loop -index \$0-2d-wave, f 12;
#X obj 315 503 tabreader~ -loop -index \$0-2d-wave, f 12;
#X obj 411 503 tabreader~ -loop -index \$0-2d-wave, f 12;
#X obj 558 81 hradio 19 1 0 8 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#X obj 275 81 hradio 19 1 0 8 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0;
#X text 640 154 Please refer back to the 2 previous examples as this is just a merge of them. We have the same crossfading structure from the wavetable scanning example but now we also add a row offset for vertical scanning., f 35;
#X text 640 269 On the left section of the patch we have a crossfading between two columns and we add an index that corresponds to the row offset given by the Y axis \, which is multiplied by 8 because we have 8 rows., f 35;
#X text 640 369 The right part is the same thing but corresponds to a crossfade between colimns in the 'next' row. A last crossfading section that is controlled by the fractional part of the vertical scanning controls the crossfade between both sections., f 35;
#X text 528 397 fractional part for crossfade, f 10;
#X text 640 494 Just like 1D scanning \, note that a full Vanilla implementation has issues because of the need of extra guard points \, which is not to worry with ELSE objects. You could still do it \, as it wouldn't really be significantly audible most of the time \, but it wouldn't be pretty or elegant., f 35;
#X text 477 43 Use horizontal sliders to select exact frames;
#X connect 0 0 20 0;
#X connect 1 0 3 1;
#X connect 2 0 5 0;
#X connect 2 0 7 0;
#X connect 3 0 6 0;
#X connect 3 0 8 0;
#X connect 4 0 15 0;
#X connect 5 0 11 0;
#X connect 5 0 40 0;
#X connect 6 0 12 0;
#X connect 6 0 42 0;
#X connect 7 0 13 0;
#X connect 7 0 44 0;
#X connect 8 0 14 0;
#X connect 8 0 46 0;
#X connect 9 0 22 0;
#X connect 10 0 30 0;
#X connect 11 0 60 0;
#X connect 12 0 61 0;
#X connect 13 0 62 0;
#X connect 14 0 63 0;
#X connect 15 0 8 1;
#X connect 15 0 7 1;
#X connect 16 0 6 1;
#X connect 16 0 5 1;
#X connect 17 0 31 0;
#X connect 18 0 17 1;
#X connect 19 0 17 0;
#X connect 20 0 21 0;
#X connect 21 0 49 0;
#X connect 22 0 23 0;
#X connect 23 0 48 0;
#X connect 24 0 4 0;
#X connect 24 0 16 0;
#X connect 25 0 1 0;
#X connect 25 0 2 1;
#X connect 29 0 9 0;
#X connect 29 0 24 0;
#X connect 30 0 0 0;
#X connect 30 0 25 0;
#X connect 32 0 10 0;
#X connect 33 0 29 0;
#X connect 34 0 33 0;
#X connect 38 0 58 0;
#X connect 38 1 59 0;
#X connect 39 0 38 0;
#X connect 40 0 41 0;
#X connect 42 0 43 0;
#X connect 44 0 45 0;
#X connect 46 0 47 0;
#X connect 48 0 17 2;
#X connect 49 0 19 2;
#X connect 49 0 18 2;
#X connect 56 0 57 0;
#X connect 57 0 2 0;
#X connect 57 0 3 0;
#X connect 58 0 32 0;
#X connect 59 0 34 0;
#X connect 60 0 19 0;
#X connect 61 0 19 1;
#X connect 62 0 18 0;
#X connect 63 0 18 1;
#X connect 64 0 34 0;
#X connect 65 0 32 0;
#X restore 298 373 pd 2D-wt-scanning;
#X listbox 414 320 20 0 0 0 - - - 0;
#X obj 160 398 f2s~ 20;
#X obj 160 374 unpack f f;
#X obj 227 398 f2s~ 20;
#X obj 42 427 wt2d~ -n 8 8 \$0-2d-wave;
#X obj 42 463 graph~;
#X obj 42 619 out~;
#X text 642 282 Open the subpatch to see the loaded wavetable, f 17;
#X text 610 82 In this example we show how to implement 2D scanning in a patch but as usual \, ELSE also has an object for this \, called [wt2d~]!, f 32;
#X text 610 152 The output of both are graphed so you can compare and see how the outcome is the same!, f 32;
#X text 610 212 The used wavetable is an 8x8 grid loaded in the [pd 2D-table] subpatch., f 32;
#X text 613 368 The patch implementation is in [pd 2D-wt-scanning]. Open it for details., f 32;
#X text 613 428 You should also open the help file of [wt2d~] for more details and note how it quite similar to [wavetable~]/[wt~] and it just has an extra inlet for crossfading vertically., f 32;
#X text 613 528 The '-n' flag in [wt2d~] defines how it must split the loades wavetable in number of columns and rows (8 8 in this case)., f 32;
#X text 29 293 set frequency in hz --->;
#X text 429 372 <------------------------;
#X text 431 63 Use the 2D slider below to crossfade between frames in two dimensions., f 18;
#X text 23 99 We can expand from the last example and show how to use a single wavetable to slice into different frames in two dimensions \, that is different columns and rows! We also expand the idea to crossfade between much more than 4 sources. In this example the wavetable is split into 8 columns and 8 rows. Note that if it had 2 columns and 2 rows \, it'd be the same thing as the previous Vector Synthesis example \, and also note this can also be considered a kind of Vector Synthesis., f 51;
#X connect 3 0 10 0;
#X connect 4 0 5 0;
#X connect 6 0 9 0;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 8 0 3 0;
#X connect 9 0 4 0;
#X connect 10 0 9 1;
#X connect 10 0 12 0;
#X connect 11 0 14 3;
#X connect 12 0 11 0;
#X connect 12 1 13 0;
#X connect 13 0 14 4;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
